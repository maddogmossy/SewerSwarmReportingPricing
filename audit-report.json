{
  "generatedAt": "2025-08-10T18:17:37.302Z",
  "system": {
    "node": "v20.19.3",
    "platform": "linux x64",
    "root": "/home/runner/workspace"
  },
  "env": {
    "DATABASE_URL": "postgresql://neondb_owner:npg_Ae1LhZHPqQ7r@ep-restless-pond-adqjk5xs.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require"
  },
  "search": {
    "dirs": [
      "server",
      "src",
      "shared"
    ],
    "tokenCount": 66,
    "filesScanned": 46
  },
  "findings": [
    {
      "file": "server/address-autocomplete.ts",
      "hits": [
        {
          "line": 24,
          "text": "\"John Street, Sunderland, SR1 1HT\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 28,
          "text": "\"Joy Lane, Whitstable, CT5 4LT\",",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 59,
          "text": "\"Piccadilly, London, W1J 0BH\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 124,
          "text": "\"Fleet Street, London, EC4Y 1AU\",",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 149,
          "text": "\"High Street, Oxford, OX1 4BJ\",",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 216,
          "text": "\"Oxford Street, London, W1C 1JN\",",
          "tokens": [
            "JN"
          ]
        },
        {
          "line": 222,
          "text": "\"Piccadilly Circus, London, W1J 9HP\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 275,
          "text": "\"Whitechapel Road, London, E1 1BJ\",",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 301,
          "text": "\"Mill Lane, Cardiff, CF10 1FL\",",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 306,
          "text": "\"Shipquay Street, Derry, BT48 6DQ\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 362,
          "text": "\"High Street, Oxford, OX1 4BJ\",",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 382,
          "text": "\"Aston Lane, Birmingham, B20 3JN\",",
          "tokens": [
            "JN"
          ]
        },
        {
          "line": 387,
          "text": "\"Bradford Road, Huddersfield, HD1 4EH\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 404,
          "text": "\"Croydon Road, Beckenham, BR3 4BJ\",",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 409,
          "text": "\"Derby Road, Nottingham, NG7 2UH\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 450,
          "text": "\"Gatwick Road, Crawley, RH10 9BZ\",",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 459,
          "text": "\"Huddersfield Road, Manchester, M40 0JJ\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 461,
          "text": "\"Hereford Road, Worcester, WR2 5AH\",",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 485,
          "text": "\"Kidderminster Road, Worcester, WR2 5AH\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 489,
          "text": "\"Knowle Road, Bristol, BS4 2RD\",",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 509,
          "text": "\"Macclesfield Road, Stockport, SK2 7BX\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 518,
          "text": "\"Newcastle Road, Sunderland, SR5 1DN\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 573,
          "text": "\"Ross Road, Hereford, HR2 7BP\",",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 602,
          "text": "\"Uttoxeter Road, Derby, DE22 3NE\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 607,
          "text": "\"Underwood Road, Plymouth, PL1 4RW\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 619,
          "text": "\"Vowchurch Road, Hereford, HR2 0RH\",",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 683,
          "text": "\"Flint Road, Chester, CH1 3AE\",",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 692,
          "text": "\"Londonderry Road, Belfast, BT12 4GG\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 695,
          "text": "\"Foyle Road, Derry, BT48 9BA\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 711,
          "text": "\"Windermere Road, Kendal, LA9 5AF\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 713,
          "text": "\"Ambleside Road, Windermere, LA23 1BA\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 717,
          "text": "\"Derwent Road, Workington, CA14 3EF\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 728,
          "text": "\"Dereham Road, Norwich, NR5 8JA\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 730,
          "text": "\"Beccles Road, Norwich, NR14 8HB\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 731,
          "text": "\"Swaffham Road, Dereham, NR19 1JG\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 744,
          "text": "\"Athenaeum Court, Piccadilly, W1J 7BQ\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 755,
          "text": "\"Eaton Square, Belgravia, SW1W 9BJ\",",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 791,
          "text": "\"Quainton Road, Waddesdon, HP18 0JW\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 830,
          "text": "\"Flint Castle Road, Flint, CH6 5JH\",",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 834,
          "text": "\"Llanfairpwll Road, Anglesey, LL61 5YH\",",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 877,
          "text": "\"Dunstable Road, Luton, LU4 8JE\",",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 878,
          "text": "\"Flitwick Road, Ampthill, MK45 2HU\",",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 923,
          "text": "\"Teignmouth Road, Dawlish, EX7 9EN\",",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 964,
          "text": "\"Accrington Road, Blackburn, BB1 2EE\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 990,
          "text": "// Peak District and Derbyshire Dales",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 994,
          "text": "\"Derby Road, Ashbourne, DE6 1GG\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 997,
          "text": "\"Macclesfield Road, Buxton, SK17 9AS\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 1003,
          "text": "\"Ambleside Road, Windermere, LA23 1AA\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 1004,
          "text": "\"Bowness Road, Windermere, LA23 3HH\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 1006,
          "text": "\"Derwent Water Road, Keswick, CA12 5DJ\",",
          "tokens": [
            "DER"
          ]
        }
      ]
    },
    {
      "file": "server/adoption-validation.ts",
      "hits": [
        {
          "line": 12,
          "text": "// Sewer Adoption (Section 104 / OS20x) Validation",
          "tokens": [
            "OS20"
          ]
        },
        {
          "line": 19,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 22,
          "text": "recommendations: string[];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 29,
          "text": "\"os19x_adoption_1751104089690.json\",",
          "tokens": [
            "OS19"
          ]
        },
        {
          "line": 30,
          "text": "\"mscc5_defects_1751041682277.json\"",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 50,
          "text": "\"OS20x defect classification\": true,",
          "tokens": [
            "OS20"
          ]
        },
        {
          "line": 59,
          "text": "\"Structural grade ≤ 2\": true,",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 60,
          "text": "\"Service grade ≤ 2\": true,",
          "tokens": [
            "grade",
            "service"
          ]
        },
        {
          "line": 66,
          "text": "// 4. Generate summary",
          "tokens": [
            "rate",
            "Summary"
          ]
        },
        {
          "line": 68,
          "text": "const recommendations: string[] = [];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 72,
          "text": "recommendations.push(\"Ensure all adoption standards files are available\");",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 82,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 85,
          "text": "recommendations",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 90,
          "text": "// Check adoptability based on OS20x and Section 104 criteria including belly conditions",
          "tokens": [
            "OS20"
          ]
        },
        {
          "line": 93,
          "text": "structuralGrade: number;",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 94,
          "text": "serviceGrade: number;",
          "tokens": [
            "grade",
            "service"
          ]
        },
        {
          "line": 95,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 98,
          "text": "adoptable?: string;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 99,
          "text": "recommendations?: string;",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 101,
          "text": "adoptable: boolean;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 106,
          "text": "const { defectCode, structuralGrade, serviceGrade, description, adoptable: msccAdoptable, recommendations } = defectData;",
          "tokens": [
            "MSCC",
            "grade",
            "structural",
            "service",
            "DES",
            "CC",
            "Recommendations",
            "Table"
          ]
        },
        {
          "line": 109,
          "text": "let adoptable = true;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 111,
          "text": "// Check for belly condition from MSCC5 classification",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 112,
          "text": "if (msccAdoptable === 'No' && recommendations?.includes('excavation to correct the fall')) {",
          "tokens": [
            "excavation",
            "MSCC",
            "DES",
            "CC",
            "Recommendations",
            "Table"
          ]
        },
        {
          "line": 113,
          "text": "adoptable = false;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 115,
          "text": "requiredActions.push('Excavation required to correct pipe fall/gradient');",
          "tokens": [
            "excavation"
          ]
        },
        {
          "line": 118,
          "text": "// OS20x compliance checks",
          "tokens": [
            "OS20"
          ]
        },
        {
          "line": 119,
          "text": "if (structuralGrade > 2) {",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 120,
          "text": "adoptable = false;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 121,
          "text": "reasons.push(`Structural grade ${structuralGrade} exceeds adoption limit (≤2)`);",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 122,
          "text": "requiredActions.push('Repair structural defects to grade 2 or below');",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 125,
          "text": "if (serviceGrade > 2) {",
          "tokens": [
            "grade",
            "service"
          ]
        },
        {
          "line": 126,
          "text": "adoptable = false;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 127,
          "text": "reasons.push(`Service grade ${serviceGrade} exceeds adoption limit (≤2)`);",
          "tokens": [
            "grade",
            "service"
          ]
        },
        {
          "line": 128,
          "text": "requiredActions.push('Resolve service defects to grade 2 or below');",
          "tokens": [
            "grade",
            "service"
          ]
        },
        {
          "line": 132,
          "text": "const bannedDefects = ['FC', 'FL', 'C', 'CR'];",
          "tokens": [
            "FC",
            "FL"
          ]
        },
        {
          "line": 133,
          "text": "if (bannedDefects.includes(defectCode)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 134,
          "text": "adoptable = false;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 136,
          "text": "requiredActions.push('Complete structural repairs before adoption consideration');",
          "tokens": [
            "structural",
            "DER"
          ]
        },
        {
          "line": 140,
          "text": "if (defectCode === 'RI' || description.toLowerCase().includes('root')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 141,
          "text": "adoptable = false;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 142,
          "text": "reasons.push('Root ingress detected - not acceptable for adoption');",
          "tokens": [
            "CC",
            "Table"
          ]
        },
        {
          "line": 148,
          "text": "if (!adoptable) {",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 155,
          "text": "adoptable,",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 162,
          "text": "// Generate Section 104 compliance report",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 163,
          "text": "static generateSection104Report(sectionData: Array<{",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 167,
          "text": "structuralGrade: number;",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 168,
          "text": "serviceGrade: number;",
          "tokens": [
            "grade",
            "service"
          ]
        },
        {
          "line": 169,
          "text": "defectDescription: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 175,
          "text": "const adoptableSections = sectionData.filter(s => s.adoptabilityStatus === 'FULL').length;",
          "tokens": [
            "Table"
          ]
        }
      ]
    },
    {
      "file": "server/authentic-processor.ts",
      "hits": [
        {
          "line": 5,
          "text": "import { evaluateObservation, rulesVersionInfo } from '../logic/rules.js';",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 6,
          "text": "import { generateSectionRecommendations } from './rule-evaluator.js';",
          "tokens": [
            "rate",
            "Recommendations",
            "rule"
          ]
        },
        {
          "line": 26,
          "text": "severityGrade: string;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 27,
          "text": "recommendations: string;",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 28,
          "text": "adoptable: string;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 29,
          "text": "cost: string | null;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 61,
          "text": "// Log WRc rules version",
          "tokens": [
            "WRc",
            "rules",
            "rule"
          ]
        },
        {
          "line": 63,
          "text": "const versionInfo = rulesVersionInfo();",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 64,
          "text": "console.log(`📋 Using WRc rules v${versionInfo.version}`);",
          "tokens": [
            "WRc",
            "rules",
            "rule"
          ]
        },
        {
          "line": 66,
          "text": "console.log('❌ Failed to load WRc rules version');",
          "tokens": [
            "WRc",
            "rules",
            "rule"
          ]
        },
        {
          "line": 72,
          "text": "// Build manhole mapping using actual WinCan schema",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 75,
          "text": "const nodeData = database.prepare(\"SELECT OBJ_PK, OBJ_Key FROM NODE WHERE OBJ_Key IS NOT NULL\").all();",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 77,
          "text": "if (node.OBJ_PK && node.OBJ_Key) {",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 78,
          "text": "manholeMap.set(node.OBJ_PK, node.OBJ_Key);",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 81,
          "text": "console.log(`🔍 Built manhole mapping with ${manholeMap.size} entries`);",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 83,
          "text": "console.log('❌ NODE table access failed:', error.message);",
          "tokens": [
            "CC",
            "Table"
          ]
        },
        {
          "line": 86,
          "text": "// Get sections using actual WinCan SECTION table structure",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 88,
          "text": "SELECT s.OBJ_PK, s.OBJ_Key, s.OBJ_SortOrder, s.OBJ_Size1, s.OBJ_Material,",
          "tokens": [
            "DER",
            "BJ"
          ]
        },
        {
          "line": 89,
          "text": "s.OBJ_Length, s.OBJ_FromNode_REF, s.OBJ_ToNode_REF, s.OBJ_FlowDir,",
          "tokens": [
            "REF",
            "BJ",
            "FL"
          ]
        },
        {
          "line": 90,
          "text": "s.OBJ_TimeStamp",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 92,
          "text": "WHERE s.OBJ_Key IS NOT NULL",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 93,
          "text": "ORDER BY COALESCE(s.OBJ_SortOrder, 999), s.OBJ_Key",
          "tokens": [
            "DER",
            "BJ"
          ]
        },
        {
          "line": 99,
          "text": "// Get severity grades",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 100,
          "text": "const gradeMap = await getSeverityGradesFromSecstat(database);",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 101,
          "text": "console.log(`🔍 Found ${Object.keys(gradeMap).length} grade mappings`);",
          "tokens": [
            "grade",
            "BJ",
            "mapping"
          ]
        },
        {
          "line": 108,
          "text": "const itemNo = record.OBJ_SortOrder || (i + 1);",
          "tokens": [
            "DER",
            "BJ"
          ]
        },
        {
          "line": 111,
          "text": "const startMH = manholeMap.get(record.OBJ_FromNode_REF) || record.OBJ_Key?.split('-')[0] || `MH${itemNo}`;",
          "tokens": [
            "REF",
            "BJ"
          ]
        },
        {
          "line": 112,
          "text": "const finishMH = manholeMap.get(record.OBJ_ToNode_REF) || record.OBJ_Key?.split('-')[1] || `MH${itemNo+1}`;",
          "tokens": [
            "REF",
            "BJ"
          ]
        },
        {
          "line": 114,
          "text": "// Get grades for this section",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 115,
          "text": "const sectionGrades = gradeMap[itemNo] || { structural: null, service: null };",
          "tokens": [
            "grade",
            "grades",
            "structural",
            "service",
            "DES"
          ]
        },
        {
          "line": 118,
          "text": "const defects = await getObservationsForSection(database, record.OBJ_PK);",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 120,
          "text": "// Determine primary defect type and grade based on WRc standards",
          "tokens": [
            "WRc",
            "grade"
          ]
        },
        {
          "line": 121,
          "text": "let severityGrade = '0';",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 122,
          "text": "let defectType = 'service';",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 123,
          "text": "let recommendations = 'No action required';",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 124,
          "text": "let adoptable = 'Yes';",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 126,
          "text": "// Priority: Structural defects take precedence",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 127,
          "text": "if (sectionGrades.structural && sectionGrades.structural > 0) {",
          "tokens": [
            "grade",
            "grades",
            "structural",
            "DES"
          ]
        },
        {
          "line": 128,
          "text": "severityGrade = sectionGrades.structural.toString();",
          "tokens": [
            "grade",
            "grades",
            "structural",
            "DES"
          ]
        },
        {
          "line": 129,
          "text": "defectType = 'structural';",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 130,
          "text": "// Generate WRc-compliant recommendations using deterministic mapping",
          "tokens": [
            "rate",
            "WRc",
            "Recommendations",
            "mapping"
          ]
        },
        {
          "line": 131,
          "text": "const wrcResult = generateSectionRecommendations(itemNo, defects, sectionGrades.structural);",
          "tokens": [
            "rate",
            "WRc",
            "grade",
            "grades",
            "structural",
            "DES",
            "Recommendations"
          ]
        },
        {
          "line": 132,
          "text": "recommendations = wrcResult.primary_recommendation.rationale;",
          "tokens": [
            "WRc",
            "Recommendations"
          ]
        },
        {
          "line": 133,
          "text": "adoptable = sectionGrades.structural >= 3 ? 'No' : 'Yes';",
          "tokens": [
            "grade",
            "grades",
            "structural",
            "DES",
            "Table"
          ]
        },
        {
          "line": 134,
          "text": "} else if (sectionGrades.service && sectionGrades.service > 0) {",
          "tokens": [
            "grade",
            "grades",
            "service",
            "DES"
          ]
        },
        {
          "line": 135,
          "text": "severityGrade = sectionGrades.service.toString();",
          "tokens": [
            "grade",
            "grades",
            "service",
            "DES"
          ]
        },
        {
          "line": 136,
          "text": "defectType = 'service';",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 137,
          "text": "// Generate WRc-compliant recommendations using deterministic mapping",
          "tokens": [
            "rate",
            "WRc",
            "Recommendations",
            "mapping"
          ]
        },
        {
          "line": 138,
          "text": "const wrcServiceResult = generateSectionRecommendations(itemNo, defects, sectionGrades.service);",
          "tokens": [
            "rate",
            "WRc",
            "grade",
            "grades",
            "service",
            "DES",
            "Recommendations"
          ]
        },
        {
          "line": 139,
          "text": "recommendations = wrcServiceResult.primary_recommendation.rationale;",
          "tokens": [
            "WRc",
            "service",
            "Recommendations"
          ]
        }
      ]
    },
    {
      "file": "server/construction-validation.ts",
      "hits": [
        {
          "line": 19,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 22,
          "text": "recommendations: string[];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 29,
          "text": "\"mscc5_defects_1751041682277.json\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 67,
          "text": "// 4. Generate summary",
          "tokens": [
            "rate",
            "Summary"
          ]
        },
        {
          "line": 69,
          "text": "const recommendations: string[] = [];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 73,
          "text": "recommendations.push(\"Ensure all construction standards files are available\");",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 83,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 86,
          "text": "recommendations",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 91,
          "text": "// Get construction display profile for external access",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 98,
          "text": "description: CONSTRUCTION_DISPLAY_CONFIG.ui_description?.summary || 'Pre/post construction validation surveys for developments',",
          "tokens": [
            "DES",
            "Summary"
          ]
        },
        {
          "line": 99,
          "text": "standards: CONSTRUCTION_DISPLAY_CONFIG.ui_description?.applicable_standards || [",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 100,
          "text": "'MSCC5: Manual of Sewer Condition Classification',",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        }
      ]
    },
    {
      "file": "server/data-integrity.ts",
      "hits": [
        {
          "line": 6,
          "text": "* 2. Preventing any synthetic/mock/placeholder data generation",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 20,
          "text": "const syntheticPatterns = [",
          "tokens": [
            "CP"
          ]
        },
        {
          "line": 25,
          "text": "/\\btest\\b/i,  // Any test references",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 26,
          "text": "/\\bmock\\b/i,  // Any mock references",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 27,
          "text": "/\\bplaceholder\\b/i, // Any placeholder references",
          "tokens": [
            "DER",
            "REF"
          ]
        },
        {
          "line": 28,
          "text": "/\\bexample\\b/i, // Any example references",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 31,
          "text": "for (const pattern of syntheticPatterns) {",
          "tokens": [
            "CP"
          ]
        },
        {
          "line": 38,
          "text": "// Check for hardcoded synthetic MH references",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 42,
          "text": "/^START$/i,    // Generic start references",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 43,
          "text": "/^END$/i,      // Generic end references",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 46,
          "text": "// Validate manhole references are authentic - \"no data recorded\" is VALID for authentic extraction",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 48,
          "text": "// Only flag if they look too generic (this needs PDF validation)",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 50,
          "text": "errors.push(`SYNTHETIC MH REFERENCES: Section ${sectionData.itemNo} has generic MH references`);",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 73,
          "text": "if (prohibitedMeterage.includes(defectData.meterage)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 78,
          "text": "// Check for manual test descriptions",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 79,
          "text": "const syntheticDescriptions = [",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 84,
          "text": "'placeholder defect'",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 87,
          "text": "if (syntheticDescriptions.some(desc =>",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 88,
          "text": "defectData.description?.toLowerCase().includes(desc.toLowerCase())",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 90,
          "text": "errors.push(`SYNTHETIC DESCRIPTION DETECTED: ${defectData.description}`);",
          "tokens": [
            "DES"
          ]
        }
      ]
    },
    {
      "file": "server/db-fallback.ts",
      "hits": [
        {
          "line": 18,
          "text": "// Create tables if they don't exist",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 22,
          "text": "// Create basic tables for immediate functionality",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 25,
          "text": "CREATE TABLE IF NOT EXISTS users (",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 48,
          "text": "CREATE TABLE IF NOT EXISTS project_folders (",
          "tokens": [
            "DER",
            "Table"
          ]
        },
        {
          "line": 51,
          "text": "folder_name TEXT NOT NULL,",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 62,
          "text": "CREATE TABLE IF NOT EXISTS file_uploads (",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 65,
          "text": "folder_id INTEGER,",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 83,
          "text": "CREATE TABLE IF NOT EXISTS section_inspections (",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 102,
          "text": "severity_grade TEXT,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 103,
          "text": "severity_grades TEXT,",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 104,
          "text": "recommendations TEXT,",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 105,
          "text": "adoptable TEXT,",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 106,
          "text": "cost TEXT,",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 110,
          "text": "CREATE TABLE IF NOT EXISTS section_defects (",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 118,
          "text": "description TEXT,",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 119,
          "text": "mscc5_grade INTEGER,",
          "tokens": [
            "MSCC5",
            "MSCC",
            "grade",
            "CC"
          ]
        },
        {
          "line": 123,
          "text": "estimated_cost TEXT,",
          "tokens": [
            "cost",
            "estimate"
          ]
        },
        {
          "line": 137,
          "text": "console.log('✅ Fallback database initialized successfully');",
          "tokens": [
            "CC"
          ]
        }
      ]
    },
    {
      "file": "server/db.ts",
      "hits": [
        {
          "line": 16,
          "text": "ssl: DATABASE_URL.includes('neon.tech') || DATABASE_URL.includes('replit')",
          "tokens": [
            "DES"
          ]
        }
      ]
    },
    {
      "file": "server/db3-validator.ts",
      "hits": [
        {
          "line": 18,
          "text": "return { valid: true, message: \"✅ Both database files loaded successfully.\" };",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 24,
          "text": "const db3Files = files.filter(file => file.endsWith('.db3') && !file.includes('_Meta'));",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 40,
          "text": "if (metaFiles.includes(expectedMetaFile)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 43,
          "text": "message: \"✅ Both database files loaded successfully.\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 58,
          "text": "message: \"✅ Main database file loaded successfully.\",",
          "tokens": [
            "CC"
          ]
        }
      ]
    },
    {
      "file": "server/domestic-validation.ts",
      "hits": [
        {
          "line": 15,
          "text": "static validateDomesticCriteria(): {",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 19,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 22,
          "text": "recommendations: string[];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 29,
          "text": "\"mscc5_defects_1751041682277.json\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 60,
          "text": "\"Structural defects assessed\": true,",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 62,
          "text": "\"Repair recommendations provided\": true,",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 67,
          "text": "// 4. Generate summary",
          "tokens": [
            "rate",
            "Summary"
          ]
        },
        {
          "line": 69,
          "text": "const recommendations: string[] = [];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 73,
          "text": "recommendations.push(\"Ensure all domestic standards files are available\");",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 83,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 86,
          "text": "recommendations",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 91,
          "text": "// Get domestic display profile for external access",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 92,
          "text": "static getDomesticProfile() {",
          "tokens": [
            "CP"
          ]
        },
        {
          "line": 98,
          "text": "description: DOMESTIC_DISPLAY_CONFIG.ui_description?.summary || 'Household and private drain assessment for homeowners',",
          "tokens": [
            "DES",
            "Summary"
          ]
        },
        {
          "line": 99,
          "text": "standards: DOMESTIC_DISPLAY_CONFIG.ui_description?.applicable_standards || [",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 100,
          "text": "'MSCC5: Manual of Sewer Condition Classification',",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 101,
          "text": "'WRc Drain Repair Book (4th Ed.)',",
          "tokens": [
            "Drain Repair Book",
            "WRc"
          ]
        }
      ]
    },
    {
      "file": "server/drain-repair-book.ts",
      "hits": [
        {
          "line": 10,
          "text": "FC: {",
          "tokens": [
            "FC"
          ]
        },
        {
          "line": 14,
          "text": "\"Local patch lining (glass mat or silicate)\",",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 15,
          "text": "\"Excavation and replace short section if structurally compromised\"",
          "tokens": [
            "excavation",
            "structural"
          ]
        },
        {
          "line": 20,
          "text": "FL: {",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 24,
          "text": "\"First consideration: patch repair for localized defects (WRc recommended for Grade 3)\",",
          "tokens": [
            "patch",
            "WRc",
            "grade",
            "DER"
          ]
        },
        {
          "line": 25,
          "text": "\"Alternative: install full-length CIPP liner for extensive damage\",",
          "tokens": [
            "liner",
            "cipp",
            "CIPP"
          ]
        },
        {
          "line": 26,
          "text": "\"Excavate and replace if at joint or severely displaced\"",
          "tokens": [
            "excavate"
          ]
        },
        {
          "line": 31,
          "text": "DER: {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 33,
          "text": "symptoms: \"Blockage from sand, stones, or debris in flow path\",",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 36,
          "text": "\"High-pressure jetting with rotating nozzle\",",
          "tokens": [
            "jetting"
          ]
        },
        {
          "line": 37,
          "text": "\"Post-clean CCTV verification survey\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 38,
          "text": "\"Adoptability fail for Grade 4-5 or 20%+ obstruction\",",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 44,
          "text": "DES: {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 46,
          "text": "symptoms: \"Silt, mud, or loose material accumulating on invert\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 48,
          "text": "\"Desilting using vacuum or jet-vac combo unit\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 49,
          "text": "\"Flush and re-inspect\",",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 55,
          "text": "WL: {",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 57,
          "text": "symptoms: \"Water backs up during flow or inspection\",",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 61,
          "text": "\"Flush or survey upstream/downstream to locate issue\"",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 70,
          "text": "\"Excavate and replace affected section\",",
          "tokens": [
            "excavate"
          ]
        },
        {
          "line": 71,
          "text": "\"Consider CIPP liner if structurally sound around defect\"",
          "tokens": [
            "liner",
            "cipp",
            "CIPP",
            "structural",
            "DER"
          ]
        }
      ]
    },
    {
      "file": "server/fuel-price-monitor.ts",
      "hits": [
        {
          "line": 4,
          "text": "import { fuelPrices, vehicleTravelRates } from '@shared/schema';",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 5,
          "text": "import { eq, desc, and } from 'drizzle-orm';",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 70,
          "text": "// Simulate realistic UK fuel price fluctuation (±3p variance)",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 84,
          "text": "// Update fuel prices in database and propagate to vehicle travel rates",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 93,
          "text": "// Store new fuel prices in monitoring table",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 113,
          "text": "// Update all vehicle travel rates that have auto-update enabled",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 114,
          "text": "await this.updateVehicleTravelRates(priceData.diesel / 100); // Convert to pounds",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 123,
          "text": "// Update vehicle travel rates with new fuel prices",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 124,
          "text": "private async updateVehicleTravelRates(newDieselPrice: number): Promise<void> {",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 126,
          "text": "// Get all vehicle travel rates with auto-update enabled",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 127,
          "text": "const vehicleRates = await db",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 129,
          "text": ".from(vehicleTravelRates)",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 130,
          "text": ".where(eq(vehicleTravelRates.autoUpdateFuelPrice, true));",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 132,
          "text": "for (const rate of vehicleRates) {",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 134,
          "text": "const fuelType = this.getFuelTypeForVehicle(rate.vehicleType);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 138,
          "text": ".update(vehicleTravelRates)",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 140,
          "text": "fuelCostPerLitre: newDieselPrice.toFixed(3),",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 144,
          "text": ".where(eq(vehicleTravelRates.id, rate.id));",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 149,
          "text": "console.error('❌ Error updating vehicle travel rates:', error);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 153,
          "text": "// Determine fuel type based on vehicle weight (most commercial vehicles use diesel)",
          "tokens": [
            "weight"
          ]
        },
        {
          "line": 155,
          "text": "// Extract weight from vehicle type string",
          "tokens": [
            "weight"
          ]
        },
        {
          "line": 156,
          "text": "const weightMatch = vehicleType.match(/(\\d+(?:\\.\\d+)?)[t]/i);",
          "tokens": [
            "weight"
          ]
        },
        {
          "line": 157,
          "text": "const weight = weightMatch ? parseFloat(weightMatch[1]) : 0;",
          "tokens": [
            "FL",
            "weight"
          ]
        },
        {
          "line": 160,
          "text": "return weight >= 3.5 ? 'diesel' : 'petrol';",
          "tokens": [
            "weight"
          ]
        },
        {
          "line": 170,
          "text": ".orderBy(desc(fuelPrices.recordedAt))",
          "tokens": [
            "DER",
            "DES"
          ]
        },
        {
          "line": 177,
          "text": ".orderBy(desc(fuelPrices.recordedAt))",
          "tokens": [
            "DER",
            "DES"
          ]
        },
        {
          "line": 185,
          "text": "diesel: parseFloat(latestDiesel[0].pricePerLitre),",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 186,
          "text": "petrol: parseFloat(latestPetrol[0].pricePerLitre)",
          "tokens": [
            "FL"
          ]
        }
      ]
    },
    {
      "file": "server/highways-validation.ts",
      "hits": [
        {
          "line": 19,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 22,
          "text": "recommendations: string[];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 29,
          "text": "\"mscc5_defects_1751041682277.json\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 53,
          "text": "\"Traffic management considerations\": true,",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 59,
          "text": "\"Structural defects identified\": true,",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 60,
          "text": "\"Service capacity assessed\": true,",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 61,
          "text": "\"Safety implications flagged\": true,",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 62,
          "text": "\"Asset condition graded\": true,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 63,
          "text": "\"Maintenance recommendations provided\": true",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 66,
          "text": "// 4. Generate summary",
          "tokens": [
            "rate",
            "Summary"
          ]
        },
        {
          "line": 68,
          "text": "const recommendations: string[] = [];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 72,
          "text": "recommendations.push(\"Ensure all highways standards files are available\");",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 82,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 85,
          "text": "recommendations",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 90,
          "text": "// Get highways display profile for external access",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 97,
          "text": "description: HIGHWAYS_DISPLAY_CONFIG.ui_description?.summary || 'Highway drainage asset inspection using HADDMS',",
          "tokens": [
            "DES",
            "Summary"
          ]
        },
        {
          "line": 98,
          "text": "standards: HIGHWAYS_DISPLAY_CONFIG.ui_description?.applicable_standards || [",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 100,
          "text": "'MSCC5: Manual of Sewer Condition Classification',",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        }
      ]
    },
    {
      "file": "server/insurance-validation.ts",
      "hits": [
        {
          "line": 19,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 22,
          "text": "recommendations: string[];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 29,
          "text": "\"mscc5_defects_1751041682277.json\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 62,
          "text": "\"Cost estimation provided\": true,",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 67,
          "text": "// 4. Generate summary",
          "tokens": [
            "rate",
            "Summary"
          ]
        },
        {
          "line": 69,
          "text": "const recommendations: string[] = [];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 73,
          "text": "recommendations.push(\"Ensure all insurance standards files are available\");",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 83,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 86,
          "text": "recommendations",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 91,
          "text": "// Get insurance display profile for external access",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 98,
          "text": "description: INSURANCE_DISPLAY_CONFIG.ui_description?.summary || 'Insurance damage evaluation and liability assessment',",
          "tokens": [
            "DES",
            "Summary"
          ]
        },
        {
          "line": 99,
          "text": "standards: INSURANCE_DISPLAY_CONFIG.ui_description?.applicable_standards || [",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 100,
          "text": "'MSCC5: Manual of Sewer Condition Classification',",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 101,
          "text": "'Drain Repair Book (4th Ed.)',",
          "tokens": [
            "Drain Repair Book"
          ]
        }
      ]
    },
    {
      "file": "server/mscc5-classifier.ts",
      "hits": [
        {
          "line": 3,
          "text": "import { OS19X_ADOPTION_STANDARDS } from './os19x-adoption';",
          "tokens": [
            "OS19"
          ]
        },
        {
          "line": 5,
          "text": "export interface MSCC5Defect {",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 7,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 8,
          "text": "type: 'structural' | 'service';",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 9,
          "text": "default_grade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 15,
          "text": "export const MSCC5_DEFECTS: Record<string, MSCC5Defect> = {",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 16,
          "text": "FC: {",
          "tokens": [
            "FC"
          ]
        },
        {
          "line": 17,
          "text": "code: 'FC',",
          "tokens": [
            "FC"
          ]
        },
        {
          "line": 18,
          "text": "description: 'Fracture - circumferential',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 19,
          "text": "type: 'structural',",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 20,
          "text": "default_grade: 4,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 22,
          "text": "recommended_action: 'Immediate structural repair required',",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 25,
          "text": "FL: {",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 26,
          "text": "code: 'FL',",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 27,
          "text": "description: 'Fracture - longitudinal',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 28,
          "text": "type: 'structural',",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 29,
          "text": "default_grade: 3,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 30,
          "text": "risk: 'Medium risk of structural failure',",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 31,
          "text": "recommended_action: 'Medium-term structural repair',",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 36,
          "text": "description: 'Crack',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 37,
          "text": "type: 'structural',",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 38,
          "text": "default_grade: 2,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 40,
          "text": "recommended_action: 'Monitor and consider repair',",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 45,
          "text": "description: 'Root intrusion',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 46,
          "text": "type: 'service',",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 47,
          "text": "default_grade: 3,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 48,
          "text": "risk: 'Progressive blockage and potential structural damage',",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 54,
          "text": "description: 'Joint displacement - large',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 55,
          "text": "type: 'structural',",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 56,
          "text": "default_grade: 4,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 63,
          "text": "description: 'Joint displacement - small',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 64,
          "text": "type: 'structural',",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 65,
          "text": "default_grade: 2,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 67,
          "text": "recommended_action: 'Monitor and consider sealing',",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 70,
          "text": "DER: {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 71,
          "text": "code: 'DER',",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 72,
          "text": "description: 'Deposits - coarse',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 73,
          "text": "type: 'service',",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 74,
          "text": "default_grade: 3,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 75,
          "text": "risk: 'Flow restriction and potential blockage',",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 79,
          "text": "DES: {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 80,
          "text": "code: 'DES',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 81,
          "text": "description: 'Deposits - fine settled',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 82,
          "text": "type: 'service',",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 83,
          "text": "default_grade: 2,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 84,
          "text": "risk: 'Gradual flow reduction',",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 85,
          "text": "recommended_action: 'Hydraulic cleaning or jetting',",
          "tokens": [
            "jetting"
          ]
        },
        {
          "line": 90,
          "text": "description: 'Deposits - concrete',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 91,
          "text": "type: 'service',",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 92,
          "text": "default_grade: 4,",
          "tokens": [
            "grade"
          ]
        }
      ]
    },
    {
      "file": "server/os19x-adoption.ts",
      "hits": [
        {
          "line": 1,
          "text": "export interface OS19xAdoptionData {",
          "tokens": [
            "OS19"
          ]
        },
        {
          "line": 2,
          "text": "grading_thresholds: {",
          "tokens": [
            "threshold"
          ]
        },
        {
          "line": 3,
          "text": "structural: {",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 4,
          "text": "max_grade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 5,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 7,
          "text": "service: {",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 8,
          "text": "max_grade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 9,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 13,
          "text": "codes: string[];",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 14,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 18,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 22,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 26,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 30,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 34,
          "text": "export const OS19X_ADOPTION_STANDARDS: OS19xAdoptionData = {",
          "tokens": [
            "OS19"
          ]
        },
        {
          "line": 35,
          "text": "grading_thresholds: {",
          "tokens": [
            "threshold"
          ]
        },
        {
          "line": 36,
          "text": "structural: {",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 37,
          "text": "max_grade: 3,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 38,
          "text": "description: \"Pipes with structural grade 4 or 5 are not adoptable unless repaired.\"",
          "tokens": [
            "grade",
            "structural",
            "DES",
            "Table"
          ]
        },
        {
          "line": 40,
          "text": "service: {",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 41,
          "text": "max_grade: 3,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 42,
          "text": "description: \"Pipes with service grade 4 or 5 require cleaning before adoption.\"",
          "tokens": [
            "grade",
            "service",
            "DES"
          ]
        },
        {
          "line": 46,
          "text": "codes: [",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 55,
          "text": "description: \"Presence of these severe defects results in automatic rejection for adoption.\"",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 59,
          "text": "description: \"Pipe gradients must conform to design drawing within 10% variance or be rejected.\"",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 63,
          "text": "\"No significant deviation from designed route\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 64,
          "text": "\"Straight-line runs between manholes preferred\"",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 66,
          "text": "description: \"Misalignment, dips, or excessive deflection result in adoption failure.\"",
          "tokens": [
            "DES",
            "FL"
          ]
        },
        {
          "line": 74,
          "text": "description: \"Poor MH construction or access chamber defects are cause for rejection.\"",
          "tokens": [
            "DES",
            "CC"
          ]
        },
        {
          "line": 78,
          "text": "\"CCTV Survey (compliant with MSCC5 or OS20x coding)\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "OS20",
            "CC"
          ]
        },
        {
          "line": 82,
          "text": "description: \"All pipes must pass CCTV and physical inspection before handover to Water Company.\"",
          "tokens": [
            "DES",
            "CC"
          ]
        }
      ]
    },
    {
      "file": "server/parseDb3File.ts",
      "hits": [
        {
          "line": 2,
          "text": "import { extractSeverityGradesFromSecstat } from \"./utils/extractSeverityGrades\";",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 13,
          "text": "severityGrades: {",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 14,
          "text": "structural: number | null;",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 15,
          "text": "service: number | null;",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 17,
          "text": "defectType: 'structural' | 'service';",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 18,
          "text": "recommendations: string;",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 19,
          "text": "adoptable: string;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 26,
          "text": "// Get SECSTAT data for severity grades",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 34,
          "text": "const sectionRows = database.prepare(\"SELECT * FROM SECTION WHERE OBJ_Deleted IS NULL OR OBJ_Deleted = ''\").all();",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 38,
          "text": "const sectionId = row.OBJ_PK; // Use primary key for matching",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 43,
          "text": "// Extract authentic severity grades",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 44,
          "text": "const grades = extractSeverityGradesFromSecstat(secstat);",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 46,
          "text": "// Determine defect type based on which grade is present",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 47,
          "text": "let defectType: 'structural' | 'service' = 'service';",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 48,
          "text": "if (grades.structural !== null && grades.service === null) {",
          "tokens": [
            "grade",
            "grades",
            "structural",
            "service",
            "DES"
          ]
        },
        {
          "line": 49,
          "text": "defectType = 'structural';",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 50,
          "text": "} else if (grades.structural !== null && grades.service !== null) {",
          "tokens": [
            "grade",
            "grades",
            "structural",
            "service",
            "DES"
          ]
        },
        {
          "line": 51,
          "text": "// If both exist, prioritize structural",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 52,
          "text": "defectType = 'structural';",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 55,
          "text": "// Generate recommendations based on authentic grades",
          "tokens": [
            "rate",
            "grade",
            "grades",
            "DES",
            "Recommendations"
          ]
        },
        {
          "line": 56,
          "text": "let recommendations = 'No action required this pipe section is at an adoptable condition';",
          "tokens": [
            "Recommendations",
            "Table"
          ]
        },
        {
          "line": 57,
          "text": "let adoptable = 'Yes';",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 59,
          "text": "const activeGrade = defectType === 'structural' ? grades.structural : grades.service;",
          "tokens": [
            "grade",
            "grades",
            "structural",
            "service",
            "DES"
          ]
        },
        {
          "line": 60,
          "text": "if (activeGrade !== null && activeGrade > 0) {",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 61,
          "text": "adoptable = 'Conditional';",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 62,
          "text": "if (defectType === 'structural') {",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 63,
          "text": "if (activeGrade <= 2) {",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 64,
          "text": "recommendations = 'WRc Drain Repair Book: Local patch lining recommended for minor structural issues';",
          "tokens": [
            "patch",
            "Drain Repair Book",
            "WRc",
            "structural",
            "Recommendations"
          ]
        },
        {
          "line": 65,
          "text": "} else if (activeGrade <= 3) {",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 66,
          "text": "recommendations = 'WRc Drain Repair Book: Structural repair or relining required';",
          "tokens": [
            "Drain Repair Book",
            "WRc",
            "structural",
            "Recommendations"
          ]
        },
        {
          "line": 68,
          "text": "recommendations = 'WRc Drain Repair Book: Immediate excavation and replacement required';",
          "tokens": [
            "excavation",
            "Drain Repair Book",
            "WRc",
            "Recommendations"
          ]
        },
        {
          "line": 69,
          "text": "adoptable = 'No';",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 72,
          "text": "if (activeGrade <= 2) {",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 73,
          "text": "recommendations = 'WRc Sewer Cleaning Manual: Standard cleaning and maintenance required';",
          "tokens": [
            "WRc",
            "Recommendations"
          ]
        },
        {
          "line": 74,
          "text": "} else if (activeGrade <= 3) {",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 75,
          "text": "recommendations = 'WRc Sewer Cleaning Manual: High-pressure jetting and cleaning required';",
          "tokens": [
            "jetting",
            "WRc",
            "Recommendations"
          ]
        },
        {
          "line": 77,
          "text": "recommendations = 'Critical service intervention required';",
          "tokens": [
            "service",
            "Recommendations"
          ]
        },
        {
          "line": 78,
          "text": "adoptable = 'No';",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 85,
          "text": "itemNo: row.OBJ_SortOrder || 0,",
          "tokens": [
            "DER",
            "BJ"
          ]
        },
        {
          "line": 86,
          "text": "startMH: row.OBJ_FromNode_REF || 'UNKNOWN',",
          "tokens": [
            "REF",
            "BJ"
          ]
        },
        {
          "line": 87,
          "text": "finishMH: row.OBJ_ToNode_REF || 'UNKNOWN',",
          "tokens": [
            "REF",
            "BJ"
          ]
        },
        {
          "line": 88,
          "text": "pipeSize: row.OBJ_Size1 || 'UNKNOWN',",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 89,
          "text": "pipeMaterial: row.OBJ_Material || 'UNKNOWN',",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 90,
          "text": "totalLength: row.OBJ_Length || 'UNKNOWN',",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 91,
          "text": "defects: 'No service or structural defect found', // Will be populated from observations",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 92,
          "text": "severityGrades: grades,",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 94,
          "text": "recommendations: recommendations,",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 95,
          "text": "adoptable: adoptable",
          "tokens": [
            "Table"
          ]
        }
      ]
    },
    {
      "file": "server/paypal.ts",
      "hits": [
        {
          "line": 14,
          "text": "OrdersController,",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 44,
          "text": "logHeaders: true,",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 48,
          "text": "const ordersController = new OrdersController(client);",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 65,
          "text": "return result.accessToken;",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 70,
          "text": "export async function createPaypalOrder(req: Request, res: Response) {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 74,
          "text": "if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 106,
          "text": "prefer: \"return=minimal\",",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 110,
          "text": "await ordersController.createOrder(collect);",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 117,
          "text": "console.error(\"Failed to create order:\", error);",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 118,
          "text": "res.status(500).json({ error: \"Failed to create order.\" });",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 122,
          "text": "export async function capturePaypalOrder(req: Request, res: Response) {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 124,
          "text": "const { orderID } = req.params;",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 126,
          "text": "id: orderID,",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 127,
          "text": "prefer: \"return=minimal\",",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 131,
          "text": "await ordersController.captureOrder(collect);",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 138,
          "text": "console.error(\"Failed to create order:\", error);",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 139,
          "text": "res.status(500).json({ error: \"Failed to capture order.\" });",
          "tokens": [
            "DER"
          ]
        }
      ]
    },
    {
      "file": "server/pdf-processor.ts",
      "hits": [
        {
          "line": 8,
          "text": "// This is a placeholder for PDF processing functionality",
          "tokens": [
            "DER"
          ]
        }
      ]
    },
    {
      "file": "server/replitAuth.ts",
      "hits": [
        {
          "line": 2,
          "text": "import { Strategy, type VerifyFunction } from \"openid-client/passport\";",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 15,
          "text": "const getOidcConfig = memoize(",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 30,
          "text": "createTableIfMissing: false,",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 32,
          "text": "tableName: \"sessions\",",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 52,
          "text": "user.access_token = tokens.access_token;",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 53,
          "text": "user.refresh_token = tokens.refresh_token;",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 75,
          "text": "const config = await getOidcConfig();",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 89,
          "text": "const strategy = new Strategy(",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 93,
          "text": "scope: \"openid email profile offline_access\",",
          "tokens": [
            "CC",
            "FL"
          ]
        },
        {
          "line": 98,
          "text": "passport.use(strategy);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 102,
          "text": "passport.deserializeUser((user: Express.User, cb) => cb(null, user));",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 107,
          "text": "scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],",
          "tokens": [
            "CC",
            "FL"
          ]
        },
        {
          "line": 113,
          "text": "successReturnToOrRedirect: \"/\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 124,
          "text": "}).href",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 137,
          "text": "const now = Math.floor(Date.now() / 1000);",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 142,
          "text": "const refreshToken = user.refresh_token;",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 143,
          "text": "if (!refreshToken) {",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 149,
          "text": "const config = await getOidcConfig();",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 150,
          "text": "const tokenResponse = await client.refreshTokenGrant(config, refreshToken);",
          "tokens": [
            "REF"
          ]
        }
      ]
    },
    {
      "file": "server/routes-admin-controls.ts",
      "hits": [
        {
          "line": 112,
          "text": "const newLockStatus = !control.isLocked;",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 116,
          "text": "isLocked: newLockStatus,",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 117,
          "text": "lockedBy: newLockStatus ? userId : null,",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 118,
          "text": "unlockedBy: !newLockStatus ? userId : null,",
          "tokens": [
            "WL"
          ]
        }
      ]
    },
    {
      "file": "server/routes-backup.ts",
      "hits": [
        {
          "line": 10,
          "text": "import { fileUploads, users, sectionInspections, sectionDefects, equipmentTypes, pricingRules, sectorStandards, projectFolders, repairMethods, repairPricing, workCategories, depotSettings, travelCalculations, vehicleTravelRates } from \"@sha",
          "tokens": [
            "pricing",
            "rate",
            "DER",
            "rules",
            "rule"
          ]
        },
        {
          "line": 11,
          "text": "import { eq, desc, asc, and } from \"drizzle-orm\";",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 12,
          "text": "import { MSCC5Classifier } from \"./mscc5-classifier\";",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 15,
          "text": "import { WorkflowTracker } from \"./workflow-tracker\";",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 33,
          "text": "dest: \"uploads/\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 40,
          "text": "if (allowedTypes.includes(ext) || file.originalname.endsWith('meta.db3')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 48,
          "text": "// Separate multer configuration for image uploads (logos)",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 50,
          "text": "dest: \"uploads/logos/\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 57,
          "text": "if (allowedTypes.includes(ext)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 92,
          "text": "headers: {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 99,
          "text": "if (response.ok && response.headers.get('content-type')?.startsWith('image/')) {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 126,
          "text": "headers: {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 138,
          "text": "/<link[^>]+rel=\"icon\"[^>]+href=\"([^\"]+)\"/i,",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 139,
          "text": "/<link[^>]+rel=\"shortcut icon\"[^>]+href=\"([^\"]+)\"/i,",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 162,
          "text": "headers: {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 169,
          "text": "if (logoResponse.ok && logoResponse.headers.get('content-type')?.startsWith('image/')) {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 212,
          "text": "// Apply flow direction correction for adoption sector",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 213,
          "text": "const correction = applyAdoptionFlowDirectionCorrection(startMH, finishMH);",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 230,
          "text": "defects: \"No action required pipe observed in acceptable structural and service condition\",",
          "tokens": [
            "structural",
            "service",
            "CC",
            "Table"
          ]
        },
        {
          "line": 231,
          "text": "severityGrade: 0,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 232,
          "text": "recommendations: \"No action required pipe observed in acceptable structural and service condition\",",
          "tokens": [
            "structural",
            "service",
            "CC",
            "Recommendations",
            "Table"
          ]
        },
        {
          "line": 233,
          "text": "adoptable: \"Yes\"",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 245,
          "text": "// FLOW DIRECTION CORRECTION LOGIC",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 254,
          "text": "// Protected Rules:",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 255,
          "text": "// 1. Longer reference containing shorter reference patterns",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 259,
          "text": "// Successfully corrects backwards flow direction patterns in adoption reports",
          "tokens": [
            "CC",
            "FL"
          ]
        },
        {
          "line": 262,
          "text": "// Extract section header data from the section inspection content",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 263,
          "text": "function extractSectionHeaderFromInspectionData(sectionText: string, itemNo: number): {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 282,
          "text": "// Look through the section content for header fields",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 287,
          "text": "if (line.includes('Dia/Height:')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 295,
          "text": "if (line.includes('Material:') && !line.includes('Lining Material:')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 303,
          "text": "if (line.includes('Total Length:')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 312,
          "text": "if (line.includes('Date:') && line.includes('Time:')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 321,
          "text": "if (line.includes('Observations:')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 324,
          "text": "!obsMatch[1].toLowerCase().includes('none') &&",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 325,
          "text": "!obsMatch[1].toLowerCase().includes('no defects')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 344,
          "text": "// For Section 1, use the user-verified authentic data from inspection report header",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 354,
          "text": "// For other sections, extract from PDF header content",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 357,
          "text": "// Look for section header with \"Section Item ${itemNo}\"",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 361,
          "text": "if (line.includes(`Section Item ${itemNo}`) ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 362,
          "text": "line.includes(`Section Inspection`) && line.includes(`Item ${itemNo}`)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 376,
          "text": "if (dataLine.includes('Dia/Height:')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 384,
          "text": "if (dataLine.includes('Material:') && !dataLine.includes('Lining Material:')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 392,
          "text": "if (dataLine.includes('Total Length:')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 413,
          "text": "function applyAdoptionFlowDirectionCorrection(upstreamNode: string, downstreamNode: string): { upstream: string, downstream: string, corrected: boolean } {",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 414,
          "text": "// Apply adoption sector flow direction rules",
          "tokens": [
            "FL",
            "rules",
            "rule"
          ]
        },
        {
          "line": 416,
          "text": "// Rule 1: Longer reference containing shorter reference should be corrected",
          "tokens": [
            "REF",
            "rule"
          ]
        },
        {
          "line": 417,
          "text": "if (upstreamNode.length > downstreamNode.length && upstreamNode.includes(downstreamNode)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 421,
          "text": "// Rule 2: F-pattern nodes with upstream inspection (shorter → longer becomes longer → shorter)",
          "tokens": [
            "DES",
            "rule"
          ]
        },
        {
          "line": 424,
          "text": "downstreamNode.includes(upstreamNode)) {",
          "tokens": [
            "DES"
          ]
        }
      ]
    },
    {
      "file": "server/routes-pr2-clean.ts",
      "hits": [
        {
          "line": 5,
          "text": "import { eq, and, sql, desc } from \"drizzle-orm\";",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 37,
          "text": "// Generate standard description based on category name and sector standards",
          "tokens": [
            "rate",
            "DES"
          ]
        },
        {
          "line": 38,
          "text": "const generateStandardDescription = (categoryName: string): string => {",
          "tokens": [
            "rate",
            "DES"
          ]
        },
        {
          "line": 41,
          "text": "// Get utilities sector standards for description consistency",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 45,
          "text": "// Category-specific descriptions based on WRc and industry standards",
          "tokens": [
            "WRc",
            "DES"
          ]
        },
        {
          "line": 46,
          "text": "const categoryDescriptions: Record<string, string> = {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 47,
          "text": "'patching': 'Localized pipe repair and patching services according to WRc Drain Repair Book standards',",
          "tokens": [
            "patch",
            "patching",
            "Drain Repair Book",
            "WRc",
            "service",
            "CC"
          ]
        },
        {
          "line": 48,
          "text": "'lining': 'Pipe lining installation services compliant with WRc Drain Rehabilitation Manual',",
          "tokens": [
            "WRc",
            "service"
          ]
        },
        {
          "line": 49,
          "text": "'relining': 'Structural pipe relining services following WRc and MSCC5 standards',",
          "tokens": [
            "MSCC5",
            "MSCC",
            "WRc",
            "structural",
            "service",
            "CC"
          ]
        },
        {
          "line": 50,
          "text": "'excavation': 'Traditional excavation and repair services per WRc Drain Repair Book guidelines',",
          "tokens": [
            "excavation",
            "Drain Repair Book",
            "WRc",
            "service"
          ]
        },
        {
          "line": 51,
          "text": "'cctv': 'Closed-circuit television inspection services according to WRc standards',",
          "tokens": [
            "WRc",
            "service",
            "CC"
          ]
        },
        {
          "line": 52,
          "text": "'cleaning': 'Drain and sewer cleaning services per WRc Drain & Sewer Cleaning Manual',",
          "tokens": [
            "WRc",
            "service"
          ]
        },
        {
          "line": 53,
          "text": "'jetting': 'High-pressure water jetting services following WRc cleaning standards',",
          "tokens": [
            "jetting",
            "WRc",
            "service"
          ]
        },
        {
          "line": 54,
          "text": "'tankering': 'Waste removal and tankering services compliant with industry standards',",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 55,
          "text": "'cutting': 'Precision cutting services according to WRc technical guidelines',",
          "tokens": [
            "WRc",
            "service",
            "CC"
          ]
        },
        {
          "line": 56,
          "text": "'inspection': 'Comprehensive inspection services per MSCC5 and WRc standards'",
          "tokens": [
            "MSCC5",
            "MSCC",
            "WRc",
            "service",
            "CC"
          ]
        },
        {
          "line": 59,
          "text": "// Find matching description based on category name keywords",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 60,
          "text": "for (const [key, description] of Object.entries(categoryDescriptions)) {",
          "tokens": [
            "DES",
            "BJ"
          ]
        },
        {
          "line": 61,
          "text": "if (name.includes(key)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 62,
          "text": "return description;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 66,
          "text": "// Default description referencing WRc standards",
          "tokens": [
            "WRc",
            "DES",
            "REF"
          ]
        },
        {
          "line": 67,
          "text": "return `${categoryName} services compliant with WRc Group standards and industry best practices`;",
          "tokens": [
            "WRc",
            "service"
          ]
        },
        {
          "line": 93,
          "text": "while (allUsedNumbers.includes(nextNumber)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 103,
          "text": "const { categoryName, description } = req.body;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 109,
          "text": "// Generate category ID from name (lowercase, hyphenated)",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 122,
          "text": "// Use original category name without F-series prefix (F-numbers handled by DevLabels)",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 125,
          "text": "// Auto-generate description if not provided",
          "tokens": [
            "rate",
            "DES"
          ]
        },
        {
          "line": 126,
          "text": "const finalDescription = description || generateStandardDescription(finalCategoryName);",
          "tokens": [
            "rate",
            "DES"
          ]
        },
        {
          "line": 150,
          "text": "// Clean PR2 Routes - Completely separate from legacy systems",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 159,
          "text": "// Helper function to generate P-number for categoryId lookups",
          "tokens": [
            "rate",
            "lookup"
          ]
        },
        {
          "line": 160,
          "text": "const generatePNumber = (categoryId: string, sector: string): string => {",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 161,
          "text": "const P_NUMBER_MAPPING = {",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 163,
          "text": "'cctv': 'P012',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 164,
          "text": "'cctv-jet-vac': 'P006',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 165,
          "text": "'cctv-van-pack': 'P008',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 166,
          "text": "'patching': 'P015',",
          "tokens": [
            "patch",
            "patching"
          ]
        },
        {
          "line": 173,
          "text": "'excavation': 'P023',",
          "tokens": [
            "excavation"
          ]
        },
        {
          "line": 177,
          "text": "'cctv': 'P112',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 178,
          "text": "'cctv-jet-vac': 'P106',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 179,
          "text": "'cctv-van-pack': 'P108',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 180,
          "text": "'patching': 'P115',",
          "tokens": [
            "patch",
            "patching"
          ]
        },
        {
          "line": 187,
          "text": "'excavation': 'P123',",
          "tokens": [
            "excavation"
          ]
        },
        {
          "line": 191,
          "text": "'cctv': 'P212',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 192,
          "text": "'cctv-jet-vac': 'P206',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 193,
          "text": "'cctv-van-pack': 'P208',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 194,
          "text": "'patching': 'P215',",
          "tokens": [
            "patch",
            "patching"
          ]
        },
        {
          "line": 201,
          "text": "'excavation': 'P223',",
          "tokens": [
            "excavation"
          ]
        },
        {
          "line": 205,
          "text": "'cctv': 'P312',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 206,
          "text": "'cctv-jet-vac': 'P306',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 207,
          "text": "'cctv-van-pack': 'P308',",
          "tokens": [
            "CC"
          ]
        }
      ]
    },
    {
      "file": "server/routes-rev-v1.ts",
      "hits": [
        {
          "line": 5,
          "text": "import { readWincanDatabase, storeWincanSections } from \"./wincan-db-reader\";",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 16,
          "text": "function determineDefectType(defectsText: string): 'structural' | 'service' {",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 17,
          "text": "if (!defectsText || defectsText === 'No service or structural defect found') {",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 18,
          "text": "return 'service';",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 23,
          "text": "// Check for structural defects",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 24,
          "text": "if (upperText.includes('DEFORMED') || upperText.includes('FRACTURE') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 25,
          "text": "upperText.includes('CRACK') || upperText.includes('JOINT') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 26,
          "text": "upperText.includes('D ') || upperText.includes('FC ') ||",
          "tokens": [
            "DES",
            "FC"
          ]
        },
        {
          "line": 27,
          "text": "upperText.includes('FL ') || upperText.includes('CR ') ||",
          "tokens": [
            "DES",
            "FL"
          ]
        },
        {
          "line": 28,
          "text": "upperText.includes('JDL') || upperText.includes('JDS')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 29,
          "text": "return 'structural';",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 32,
          "text": "// Otherwise assume service defect",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 33,
          "text": "return 'service';",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 36,
          "text": "// SRM grading calculation function",
          "tokens": [
            "SRM"
          ]
        },
        {
          "line": 37,
          "text": "function getSRMGrading(grade: number, type: 'structural' | 'service') {",
          "tokens": [
            "SRM",
            "grade",
            "structural",
            "service"
          ]
        },
        {
          "line": 38,
          "text": "const srmScoring = {",
          "tokens": [
            "SRM",
            "Scoring"
          ]
        },
        {
          "line": 39,
          "text": "structural: {",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 40,
          "text": "\"0\": { description: \"No action required\", criteria: \"Pipe observed in acceptable structural and service condition\", action_required: \"No action required\", adoptable: true },",
          "tokens": [
            "structural",
            "service",
            "DES",
            "CC",
            "Table"
          ]
        },
        {
          "line": 41,
          "text": "\"1\": { description: \"Excellent structural condition\", criteria: \"No defects observed\", action_required: \"None\", adoptable: true },",
          "tokens": [
            "structural",
            "DES",
            "Table"
          ]
        },
        {
          "line": 42,
          "text": "\"2\": { description: \"Minor defects\", criteria: \"Some minor wear or joint displacement\", action_required: \"No immediate action\", adoptable: true },",
          "tokens": [
            "DES",
            "Table"
          ]
        },
        {
          "line": 43,
          "text": "\"3\": { description: \"Moderate deterioration\", criteria: \"Isolated fractures, minor infiltration\", action_required: \"Medium-term repair or monitoring\", adoptable: true },",
          "tokens": [
            "rate",
            "DER",
            "DES",
            "Table"
          ]
        },
        {
          "line": 44,
          "text": "\"4\": { description: \"Significant deterioration\", criteria: \"Multiple fractures, poor alignment, heavy infiltration\", action_required: \"Consider near-term repair\", adoptable: false },",
          "tokens": [
            "DER",
            "DES",
            "Table"
          ]
        },
        {
          "line": 45,
          "text": "\"5\": { description: \"Severe structural failure\", criteria: \"Collapse, deformation, major cracking\", action_required: \"Immediate repair or replacement\", adoptable: false }",
          "tokens": [
            "structural",
            "DES",
            "Table"
          ]
        },
        {
          "line": 47,
          "text": "service: {",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 48,
          "text": "\"0\": { description: \"No action required\", criteria: \"Pipe observed in acceptable structural and service condition\", action_required: \"No action required\", adoptable: true },",
          "tokens": [
            "structural",
            "service",
            "DES",
            "CC",
            "Table"
          ]
        },
        {
          "line": 49,
          "text": "\"1\": { description: \"No service issues\", criteria: \"Free flowing, no obstructions or deposits\", action_required: \"None\", adoptable: true },",
          "tokens": [
            "service",
            "DES",
            "FL",
            "Table"
          ]
        },
        {
          "line": 50,
          "text": "\"2\": { description: \"Minor service impacts\", criteria: \"Minor settled deposits or water levels\", action_required: \"Routine monitoring\", adoptable: true },",
          "tokens": [
            "service",
            "DES",
            "Table"
          ]
        },
        {
          "line": 51,
          "text": "\"3\": { description: \"Moderate service defects\", criteria: \"Partial blockages, 5–20% cross-sectional loss\", action_required: \"Desilting or cleaning recommended\", adoptable: true },",
          "tokens": [
            "rate",
            "service",
            "DER",
            "DES",
            "Table"
          ]
        },
        {
          "line": 52,
          "text": "\"4\": { description: \"Major service defects\", criteria: \"Severe deposits, 20–50% loss, significant flow restriction\", action_required: \"Cleaning or partial repair\", adoptable: false },",
          "tokens": [
            "service",
            "DES",
            "FL",
            "Table"
          ]
        },
        {
          "line": 53,
          "text": "\"5\": { description: \"Blocked or non-functional\", criteria: \"Over 50% flow loss or complete blockage\", action_required: \"Immediate action required\", adoptable: false }",
          "tokens": [
            "DES",
            "FL",
            "Table"
          ]
        },
        {
          "line": 57,
          "text": "const gradeKey = Math.min(grade, 5).toString();",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 58,
          "text": "return srmScoring[type][gradeKey] || srmScoring.service[\"1\"];",
          "tokens": [
            "SRM",
            "grade",
            "service",
            "Scoring"
          ]
        },
        {
          "line": 63,
          "text": "dest: 'uploads/',",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 83,
          "text": "// In-memory storage for folders (REV_V1 simulation)",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 84,
          "text": "let folderStorage = [",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 87,
          "text": "folderName: \"ECL NEWARK - Bowbridge Lane\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 97,
          "text": "folderName: \"Cromwell Road, CB1 3EG\",",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 126,
          "text": "res.json({ success: true, message: \"Test user access granted\" });",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 133,
          "text": "app.get('/api/uploads', async (req, res) => {",
          "tokens": [
            "/api/upload"
          ]
        },
        {
          "line": 145,
          "text": "app.delete('/api/uploads/:id', async (req, res) => {",
          "tokens": [
            "/api/upload"
          ]
        },
        {
          "line": 172,
          "text": "res.json({ success: true, message: 'Upload and all associated data deleted successfully' });",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 179,
          "text": "app.get('/api/folders', async (req, res) => {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 182,
          "text": "const folders = await storage.getProjectFolders(\"test-user\");",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 183,
          "text": "res.json(folders);",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 185,
          "text": "console.error('Error fetching folders:', error);",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 186,
          "text": "res.status(500).json({ error: 'Failed to fetch folders' });",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 190,
          "text": "app.post('/api/folders', async (req, res) => {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 192,
          "text": "// Create new folder with proper data structure",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 193,
          "text": "const newFolder = {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 195,
          "text": "folderName: req.body.projectAddress || req.body.folderName || \"New Folder\",",
          "tokens": [
            "DER"
          ]
        }
      ]
    },
    {
      "file": "server/routes.ts",
      "hits": [
        {
          "line": 18,
          "text": "import { fileUploads, users, sectionInspections, sectionDefects, equipmentTypes, pricingRules, sectorStandards, projectFolders, repairMethods, repairPricing, workCategories, depotSettings, travelCalculations, vehicleTravelRates } from \"@sha",
          "tokens": [
            "pricing",
            "rate",
            "DER",
            "rules",
            "rule"
          ]
        },
        {
          "line": 19,
          "text": "import { eq, desc, asc, and } from \"drizzle-orm\";",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 20,
          "text": "import { MSCC5Classifier } from \"./mscc5-classifier\";",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 23,
          "text": "import { WorkflowTracker } from \"./workflow-tracker\";",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 43,
          "text": "dest: \"uploads/\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 50,
          "text": "if (allowedTypes.includes(ext) || file.originalname.endsWith('meta.db3')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 58,
          "text": "// Separate multer configuration for image uploads (logos)",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 60,
          "text": "dest: \"uploads/logos/\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 67,
          "text": "if (allowedTypes.includes(ext)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 98,
          "text": "if (logoResponse.ok && logoResponse.headers.get('content-type')?.startsWith('image/')) {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 124,
          "text": "/<link rel=\"icon\" href=\"([^\"]+)\"/i,",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 125,
          "text": "/<link rel=\"shortcut icon\" href=\"([^\"]+)\"/i,",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 143,
          "text": "if (logoResponse.ok && logoResponse.headers.get('content-type')?.startsWith('image/')) {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 185,
          "text": "// TODO: extract grading, observations, node refs, etc",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 200,
          "text": "// Test auth bypass - provide unlimited access without trial",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 208,
          "text": "access: 'unlimited',",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 215,
          "text": "// Company Settings API endpoints - positioned early to avoid route conflicts",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 338,
          "text": "res.json({ message: \"Invitation sent successfully\", invitation: createdInvitation });",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 345,
          "text": "// Payment Methods API endpoints (placeholder for Stripe integration)",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 348,
          "text": "// Placeholder response for payment methods",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 359,
          "text": "// Placeholder for payment method update",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 360,
          "text": "res.json({ message: \"Payment method updated successfully\" });",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 367,
          "text": "// Vehicle Travel Rates API endpoints",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 368,
          "text": "app.get(\"/api/vehicle-travel-rates\", async (req: Request, res: Response) => {",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 371,
          "text": "const vehicleRates = await storage.getVehicleTravelRates(userId);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 372,
          "text": "res.json(vehicleRates || []);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 374,
          "text": "console.error(\"Error fetching vehicle travel rates:\", error);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 375,
          "text": "res.status(500).json({ error: \"Failed to fetch vehicle travel rates\" });",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 379,
          "text": "app.post(\"/api/vehicle-travel-rates\", async (req: Request, res: Response) => {",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 382,
          "text": "const rateData = { ...req.body, userId };",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 383,
          "text": "const newRate = await storage.createVehicleTravelRate(rateData);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 384,
          "text": "res.json(newRate);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 386,
          "text": "console.error(\"Error creating vehicle travel rate:\", error);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 387,
          "text": "res.status(500).json({ error: \"Failed to create vehicle travel rate\" });",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 391,
          "text": "app.put(\"/api/vehicle-travel-rates/:id\", async (req: Request, res: Response) => {",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 393,
          "text": "const rateId = parseInt(req.params.id);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 395,
          "text": "const updatedRate = await storage.updateVehicleTravelRate(rateId, updates);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 396,
          "text": "res.json(updatedRate);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 398,
          "text": "console.error(\"Error updating vehicle travel rate:\", error);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 399,
          "text": "res.status(500).json({ error: \"Failed to update vehicle travel rate\" });",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 403,
          "text": "app.delete(\"/api/vehicle-travel-rates/:id\", async (req: Request, res: Response) => {",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 405,
          "text": "const rateId = parseInt(req.params.id);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 406,
          "text": "await storage.deleteVehicleTravelRate(rateId);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 407,
          "text": "res.json({ message: \"Vehicle travel rate deleted successfully\" });",
          "tokens": [
            "rate",
            "CC"
          ]
        },
        {
          "line": 409,
          "text": "console.error(\"Error deleting vehicle travel rate:\", error);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 410,
          "text": "res.status(500).json({ error: \"Failed to delete vehicle travel rate\" });",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 415,
          "text": "app.post(\"/api/upload\", upload.single(\"file\"), async (req: Request, res: Response) => {",
          "tokens": [
            "/api/upload"
          ]
        },
        {
          "line": 458,
          "text": "// Handle folder assignment and visit number",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 459,
          "text": "let folderId = null;",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 462,
          "text": "if (req.body.folderId) {",
          "tokens": [
            "DER"
          ]
        }
      ]
    },
    {
      "file": "server/rule-evaluator.ts",
      "hits": [
        {
          "line": 1,
          "text": "// Local rule loader/evaluator. No AI. Deterministic outcomes.",
          "tokens": [
            "DER",
            "rule"
          ]
        },
        {
          "line": 8,
          "text": "grade?: number | null;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 11,
          "text": "section_plr?: string | null;",
          "tokens": [
            "PLR"
          ]
        },
        {
          "line": 15,
          "text": "rec_type: \"patch\" | \"liner\" | \"clean\" | \"reinspect\";",
          "tokens": [
            "liner",
            "patch"
          ]
        },
        {
          "line": 17,
          "text": "wr_ref: string;",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 18,
          "text": "operational_action?: number;",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 20,
          "text": "for?: { code?: string | null; grade?: number | null; position_m?: number | null };",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 23,
          "text": "type Rule = {",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 24,
          "text": "when: { code_regex?: string; min_grade?: number };",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 28,
          "text": "type RulesFile = {",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 32,
          "text": "rules: Rule[];",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 35,
          "text": "let CACHE: { loadedAt: number; rules: RulesFile } | null = null;",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 37,
          "text": "function loadRulesFile(): RulesFile {",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 38,
          "text": "if (CACHE && Date.now() - CACHE.loadedAt < 5_000) return CACHE.rules; // small cache",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 39,
          "text": "const filePath = path.join(process.cwd(), \"logic\", \"wrc_rules.json\");",
          "tokens": [
            "WRc",
            "rules",
            "rule"
          ]
        },
        {
          "line": 41,
          "text": "const json = JSON.parse(raw) as RulesFile;",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 42,
          "text": "CACHE = { loadedAt: Date.now(), rules: json };",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 47,
          "text": "const { rules, defaults } = loadRulesFile();",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 50,
          "text": "const grade = typeof obs.grade === \"number\" ? obs.grade : null;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 52,
          "text": "for (const rule of rules) {",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 53,
          "text": "const codeOk = rule.when.code_regex",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 54,
          "text": "? new RegExp(rule.when.code_regex, \"i\").test(code)",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 56,
          "text": "const gradeOk = typeof rule.when.min_grade === \"number\"",
          "tokens": [
            "grade",
            "rule"
          ]
        },
        {
          "line": 57,
          "text": "? (grade ?? 0) >= rule.when.min_grade!",
          "tokens": [
            "grade",
            "rule"
          ]
        },
        {
          "line": 60,
          "text": "if (codeOk && gradeOk) {",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 62,
          "text": "...rule.outcome,",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 63,
          "text": "for: { code: obs.code ?? null, grade, position_m: obs.position_m ?? null }",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 68,
          "text": "// Fallback if no rule matched",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 71,
          "text": "for: { code: obs.code ?? null, grade, position_m: obs.position_m ?? null }",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 75,
          "text": "export function rulesVersionInfo() {",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 76,
          "text": "const f = loadRulesFile();",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 81,
          "text": "* Process section-level recommendations based on defect text and grade",
          "tokens": [
            "grade",
            "Recommendations"
          ]
        },
        {
          "line": 84,
          "text": "export function generateSectionRecommendations(",
          "tokens": [
            "rate",
            "Recommendations"
          ]
        },
        {
          "line": 87,
          "text": "defectGrade: number",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 90,
          "text": "all_recommendations: Recommendation[];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 91,
          "text": "summary: string;",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 96,
          "text": "// Parse defects like \"WL at 0m; DER at 1.8m, 20.47m; LL at 15.52m\"",
          "tokens": [
            "WL",
            "DER"
          ]
        },
        {
          "line": 111,
          "text": "grade: defectGrade,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 112,
          "text": "position_m: parseFloat(posMatch[1]),",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 119,
          "text": "grade: defectGrade,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 130,
          "text": "if (observations.length === 0 && defectGrade > 0) {",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 133,
          "text": "grade: defectGrade,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 139,
          "text": "const allRecommendations: Recommendation[] = [];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 142,
          "text": "allRecommendations.push(...recs);",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 146,
          "text": "const primaryRec = allRecommendations.reduce((highest, current) =>",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 148,
          "text": ", allRecommendations[0] || {",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 151,
          "text": "wr_ref: 'WRc standards',",
          "tokens": [
            "WRc",
            "REF"
          ]
        },
        {
          "line": 152,
          "text": "operational_action: 15,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 156,
          "text": "// Generate summary",
          "tokens": [
            "rate",
            "Summary"
          ]
        },
        {
          "line": 157,
          "text": "const actionCounts = allRecommendations.reduce((acc, rec) => {",
          "tokens": [
            "CC",
            "Recommendations"
          ]
        }
      ]
    },
    {
      "file": "server/sector-standards.ts",
      "hits": [
        {
          "line": 5,
          "text": "* and provides the standards information for display on reports",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 11,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 31,
          "text": "name: \"MSCC5\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 33,
          "text": "description: \"Manual of Sewer Condition Classification\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 34,
          "text": "authority: \"WRc Group\",",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 35,
          "text": "url: \"https://wrcgroup.com/products/mscc5\"",
          "tokens": [
            "MSCC5",
            "MSCC",
            "WRc",
            "CC"
          ]
        },
        {
          "line": 38,
          "text": "name: \"SRM\",",
          "tokens": [
            "SRM"
          ]
        },
        {
          "line": 40,
          "text": "description: \"Sewerage Rehabilitation Manual\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 41,
          "text": "authority: \"WRc Group\",",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 42,
          "text": "url: \"https://wrcgroup.com/products/srm\"",
          "tokens": [
            "SRM",
            "WRc"
          ]
        },
        {
          "line": 46,
          "text": "description: \"Drain and sewer systems outside buildings - Sewer system management\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 52,
          "text": "description: \"UK legislation governing water and sewerage undertakers\",",
          "tokens": [
            "DER",
            "DES"
          ]
        },
        {
          "line": 57,
          "text": "name: \"WRc Drain Repair Book\",",
          "tokens": [
            "Drain Repair Book",
            "WRc"
          ]
        },
        {
          "line": 59,
          "text": "description: \"Comprehensive guide to drain repair methods and techniques\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 60,
          "text": "authority: \"WRc Group\",",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 61,
          "text": "url: \"https://wrcgroup.com/products/drain-repair-book\"",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 64,
          "text": "name: \"WRc Sewer Cleaning Manual\",",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 65,
          "text": "description: \"Best practices for sewer cleaning and maintenance\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 66,
          "text": "authority: \"WRc Group\",",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 67,
          "text": "url: \"https://wrcgroup.com/products/sewer-cleaning-manual\"",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 70,
          "text": "complianceNote: \"All observations and recommendations are assessed against WRc Group MSCC5 standards with cross-reference to BS EN 752:2017 requirements for utilities sector compliance.\"",
          "tokens": [
            "MSCC5",
            "MSCC",
            "WRc",
            "REF",
            "CC",
            "Recommendations"
          ]
        },
        {
          "line": 81,
          "text": "description: \"Design and construction guide for adoptable sewers\",",
          "tokens": [
            "DES",
            "Table"
          ]
        },
        {
          "line": 86,
          "text": "name: \"OS20x Series\",",
          "tokens": [
            "OS20"
          ]
        },
        {
          "line": 87,
          "text": "description: \"Operational Standards for new connections and adoptions\",",
          "tokens": [
            "operational",
            "DES"
          ]
        },
        {
          "line": 92,
          "text": "description: \"Specification for the Sewerage Sector Guidance\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 97,
          "text": "description: \"Developers' Code of Sewerage Guidance\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 102,
          "text": "description: \"Construction and testing of drains and sewers\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 108,
          "text": "description: \"Section 104 agreements and adoption procedures\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 113,
          "text": "complianceNote: \"All defects are assessed against Sewers for Adoption 8th Edition standards with adoptability determination based on OS20x compliance requirements.\"",
          "tokens": [
            "OS20"
          ]
        },
        {
          "line": 123,
          "text": "description: \"Highway Asset Data and Data Management System\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 128,
          "text": "name: \"Design Manual for Roads and Bridges\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 130,
          "text": "description: \"UK standards for highway drainage design\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 136,
          "text": "description: \"Drain and sewer systems outside buildings\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 142,
          "text": "description: \"UK legislation governing highway drainage responsibilities\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 148,
          "text": "description: \"Highway drainage and flood risk management\",",
          "tokens": [
            "DES",
            "FL"
          ]
        },
        {
          "line": 152,
          "text": "complianceNote: \"All highway drainage defects are assessed against HADDMS criteria with compliance verification according to Design Manual for Roads and Bridges standards.\"",
          "tokens": [
            "DES",
            "CC"
          ]
        },
        {
          "line": 162,
          "text": "description: \"Association of British Insurers drainage investigation standards\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 168,
          "text": "description: \"Royal Institution of Chartered Surveyors drainage survey standards\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 174,
          "text": "description: \"Drain and sewer systems outside buildings\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 180,
          "text": "description: \"Insurance industry standard for defect classification and liability assessment\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 185,
          "text": "description: \"Property damage risk evaluation for drainage defects\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 189,
          "text": "complianceNote: \"All defects are assessed against ABI Guidelines with risk classification and liability determination according to insurance industry standards.\"",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 199,
          "text": "description: \"Construction and testing of drains and sewers\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 205,
          "text": "description: \"Drain and sewer systems outside buildings\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 211,
          "text": "description: \"Construction (Design and Management) Regulations\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 217,
          "text": "description: \"Construction Industry Research and Information Association drainage standards\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 223,
          "text": "description: \"National House Building Council technical standards\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 225,
          "text": "url: \"https://www.nhbc.co.uk/builders/products-and-services/techzone/nhbc-standards/\"",
          "tokens": [
            "service",
            "DER"
          ]
        },
        {
          "line": 228,
          "text": "complianceNote: \"All construction defects are assessed against BS EN 1610:2015 standards with compliance verification according to CDM Regulations and CIRIA guidelines.\"",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 238,
          "text": "description: \"Drainage and waste disposal for domestic properties\",",
          "tokens": [
            "DES"
          ]
        }
      ]
    },
    {
      "file": "server/sewer-cleaning.ts",
      "hits": [
        {
          "line": 2,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 9,
          "text": "DES: {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 10,
          "text": "description: \"Deposits - fine (silt, mud)\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 12,
          "text": "\"Jetting with medium-pressure nozzle\",",
          "tokens": [
            "jetting"
          ]
        },
        {
          "line": 14,
          "text": "\"Flushing to downstream manhole\"",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 19,
          "text": "DER: {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 20,
          "text": "description: \"Deposits - coarse (gravel, debris)\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 23,
          "text": "\"High-pressure jetting with rotating nozzle\",",
          "tokens": [
            "jetting"
          ]
        },
        {
          "line": 24,
          "text": "\"Post-clean CCTV verification survey\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 26,
          "text": "\"Adoptability fail for Grade 4-5 or 20%+ obstruction\"",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 28,
          "text": "cleaning_frequency: \"Quarterly or after CCTV trigger\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 32,
          "text": "description: \"Deposits - concrete (hard deposits)\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 36,
          "text": "\"Multiple pass cleaning strategy\",",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 37,
          "text": "\"Post-cutting CCTV verification survey\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 44,
          "text": "description: \"Grease or fat deposits\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 46,
          "text": "\"Hot water jetting\",",
          "tokens": [
            "jetting"
          ]
        },
        {
          "line": 50,
          "text": "cleaning_frequency: \"Monthly to quarterly in food service areas\",",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 54,
          "text": "description: \"Root ingress\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 56,
          "text": "\"Mechanical root cutting\",",
          "tokens": [
            "root cut"
          ]
        },
        {
          "line": 58,
          "text": "\"CCTV confirmation post-clean\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 59,
          "text": "\"Root barrier or liner for long-term control\"",
          "tokens": [
            "liner"
          ]
        },
        {
          "line": 61,
          "text": "cleaning_frequency: \"Annual or on reoccurrence\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 64,
          "text": "WL: {",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 65,
          "text": "description: \"Water level above normal (indicating potential downstream blockage)\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 69,
          "text": "\"Consideration should be given to downstream access\",",
          "tokens": [
            "DER",
            "CC"
          ]
        },
        {
          "line": 70,
          "text": "\"High-pressure jetting to clear potential downstream obstruction\",",
          "tokens": [
            "jetting"
          ]
        },
        {
          "line": 71,
          "text": "\"CCTV survey downstream sections to identify blockage location\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 78,
          "text": "description: \"Complete blockage\",",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 80,
          "text": "\"High-pressure jetting with rotating head\",",
          "tokens": [
            "jetting"
          ]
        },
        {
          "line": 81,
          "text": "\"Vacuum removal at next accessible chamber\",",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 82,
          "text": "\"CCTV to confirm clearance\"",
          "tokens": [
            "CC"
          ]
        }
      ]
    },
    {
      "file": "server/storage.ts",
      "hits": [
        {
          "line": 6,
          "text": "reportPricing,",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 7,
          "text": "userCostBands,",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 10,
          "text": "userPricing,",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 11,
          "text": "pricingRules,",
          "tokens": [
            "pricing",
            "rules",
            "rule"
          ]
        },
        {
          "line": 14,
          "text": "vehicleTravelRates,",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 17,
          "text": "projectFolders,",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 25,
          "text": "type ReportPricing,",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 26,
          "text": "type UserCostBand,",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 27,
          "text": "type InsertUserCostBand,",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 32,
          "text": "type UserPricing,",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 33,
          "text": "type InsertUserPricing,",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 34,
          "text": "type PricingRule,",
          "tokens": [
            "pricing",
            "rule"
          ]
        },
        {
          "line": 35,
          "text": "type InsertPricingRule,",
          "tokens": [
            "pricing",
            "rule"
          ]
        },
        {
          "line": 40,
          "text": "type VehicleTravelRate,",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 41,
          "text": "type InsertVehicleTravelRate,",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 46,
          "text": "type ProjectFolder,",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 47,
          "text": "type InsertProjectFolderType,",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 50,
          "text": "import { eq, desc, and, or, isNull, asc } from \"drizzle-orm\";",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 61,
          "text": "// Project folder operations",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 62,
          "text": "getProjectFolders(userId: string): Promise<ProjectFolder[]>;",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 63,
          "text": "createProjectFolder(folder: InsertProjectFolderType): Promise<ProjectFolder>;",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 64,
          "text": "updateProjectFolder(id: number, folder: Partial<ProjectFolder>): Promise<ProjectFolder>;",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 65,
          "text": "deleteProjectFolder(id: number): Promise<{ folderName: string; deletedCounts: { uploads: number; sections: number } }>;",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 70,
          "text": "getFileUploadsByFolder(folderId: number | null): Promise<FileUpload[]>;",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 82,
          "text": "getReportPricing(): Promise<ReportPricing[]>;",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 91,
          "text": "// User cost band customization",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 92,
          "text": "getUserCostBands(userId: string, sector: string): Promise<UserCostBand[]>;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 93,
          "text": "createUserCostBand(costBand: InsertUserCostBand): Promise<UserCostBand>;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 94,
          "text": "updateUserCostBand(id: number, costBand: string): Promise<UserCostBand>;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 95,
          "text": "deleteUserCostBand(id: number): Promise<void>;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 96,
          "text": "resetUserCostBands(userId: string, sector: string): Promise<void>;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 98,
          "text": "// New detailed pricing system",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 104,
          "text": "getUserPricing(userId: string, equipmentTypeId?: number): Promise<UserPricing[]>;",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 105,
          "text": "createUserPricing(pricing: InsertUserPricing): Promise<UserPricing>;",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 106,
          "text": "updateUserPricing(id: number, pricing: Partial<InsertUserPricing>): Promise<UserPricing>;",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 107,
          "text": "deleteUserPricing(id: number): Promise<void>;",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 108,
          "text": "getUserPricingRules(userId: string, categoryId?: number): Promise<PricingRule[]>;",
          "tokens": [
            "pricing",
            "rules",
            "rule"
          ]
        },
        {
          "line": 109,
          "text": "createPricingRule(rule: InsertPricingRule): Promise<PricingRule>;",
          "tokens": [
            "pricing",
            "rule"
          ]
        },
        {
          "line": 110,
          "text": "updatePricingRule(id: number, userId: string, rule: Partial<InsertPricingRule>): Promise<PricingRule>;",
          "tokens": [
            "pricing",
            "rule"
          ]
        },
        {
          "line": 111,
          "text": "deletePricingRule(id: number, userId?: string): Promise<void>;",
          "tokens": [
            "pricing",
            "rule"
          ]
        },
        {
          "line": 113,
          "text": "// Sector-specific pricing rules",
          "tokens": [
            "pricing",
            "rules",
            "rule"
          ]
        },
        {
          "line": 114,
          "text": "getPricingRulesBySector(userId: string, sector: string): Promise<PricingRule[]>;",
          "tokens": [
            "pricing",
            "rules",
            "rule"
          ]
        },
        {
          "line": 125,
          "text": "acceptTeamInvitation(token: string, userId: string): Promise<void>;",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 142,
          "text": ".onConflictDoUpdate({",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 181,
          "text": "// Project folder operations",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 182,
          "text": "async getProjectFolders(userId: string): Promise<ProjectFolder[]> {",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 185,
          "text": ".from(projectFolders)",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 186,
          "text": ".where(eq(projectFolders.userId, userId))",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 187,
          "text": ".orderBy(desc(projectFolders.createdAt));",
          "tokens": [
            "DER",
            "DES"
          ]
        },
        {
          "line": 190,
          "text": "async createProjectFolder(folder: InsertProjectFolderType): Promise<ProjectFolder> {",
          "tokens": [
            "DER"
          ]
        }
      ]
    },
    {
      "file": "server/tp2-patching-logic.ts",
      "hits": [
        {
          "line": 2,
          "text": "* TP2 PATCHING LOGIC SYSTEM",
          "tokens": [
            "patch",
            "patching"
          ]
        },
        {
          "line": 4,
          "text": "* This file documents the complete TP2 patching logic for structural repair cost calculations.",
          "tokens": [
            "cost",
            "patch",
            "patching",
            "structural"
          ]
        },
        {
          "line": 5,
          "text": "* TP2 is exclusively for patching configurations, completely separate from TP1 standard configurations.",
          "tokens": [
            "rate",
            "patch",
            "patching"
          ]
        },
        {
          "line": 12,
          "text": "export interface TP2PatchingRules {",
          "tokens": [
            "patch",
            "patching",
            "rules",
            "rule"
          ]
        },
        {
          "line": 14,
          "text": "templateSystem: 'TP2_ONLY'; // TP2 exclusively for patching, TP1 for standard configs",
          "tokens": [
            "patch",
            "patching"
          ]
        },
        {
          "line": 18,
          "text": "// Patch counting logic",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 20,
          "text": "proximityThreshold: number;  // Distance in mm to group defects as single patch",
          "tokens": [
            "patch",
            "threshold"
          ]
        },
        {
          "line": 22,
          "text": "// Cost calculation",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 23,
          "text": "costCalculation: 'UNIT_COST_X_REPAIR_COUNT';",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 24,
          "text": "unitCost: number;           // Cost per patch (e.g., £350 for Double Layer)",
          "tokens": [
            "cost",
            "£",
            "patch"
          ]
        },
        {
          "line": 25,
          "text": "minQuantity: number;        // Minimum quantity threshold",
          "tokens": [
            "threshold"
          ]
        },
        {
          "line": 28,
          "text": "structuralDefectCodes: string[]; // Codes that trigger TP2 patching",
          "tokens": [
            "patch",
            "patching",
            "structural",
            "DES"
          ]
        },
        {
          "line": 32,
          "text": "* TP2 PATCHING RULES AND LOGIC",
          "tokens": [
            "patch",
            "patching",
            "rules",
            "rule"
          ]
        },
        {
          "line": 34,
          "text": "export const TP2_PATCHING_RULES: TP2PatchingRules = {",
          "tokens": [
            "patch",
            "patching",
            "rules",
            "rule"
          ]
        },
        {
          "line": 41,
          "text": "proximityThreshold: 1000, // 1000mm = 1m proximity grouping",
          "tokens": [
            "threshold"
          ]
        },
        {
          "line": 43,
          "text": "// Cost calculation formula",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 44,
          "text": "costCalculation: 'UNIT_COST_X_REPAIR_COUNT',",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 45,
          "text": "unitCost: 0, // Will be fetched from pipe-specific TP2 configs",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 48,
          "text": "// Structural defect detection codes",
          "tokens": [
            "structural",
            "DES"
          ]
        },
        {
          "line": 49,
          "text": "structuralDefectCodes: [",
          "tokens": [
            "structural",
            "DES"
          ]
        },
        {
          "line": 51,
          "text": "'FL',     // Fracture longitudinal",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 52,
          "text": "'FC',     // Fracture circumferential",
          "tokens": [
            "FC"
          ]
        },
        {
          "line": 67,
          "text": "* - Look for patterns like \"3 repairs\", \"2 patches\", \"1 repair\"",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 71,
          "text": "* - Extract all meterage references from defects text",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 73,
          "text": "* - Count groups as individual patch requirements",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 76,
          "text": "const recommendationsText = section.recommendations || '';",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 79,
          "text": "// Method 1: Extract from recommendations text",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 80,
          "text": "const repairCountMatch = recommendationsText.match(/(\\d+)\\s+(?:repair|patch)/i);",
          "tokens": [
            "patch",
            "Recommendations"
          ]
        },
        {
          "line": 93,
          "text": ".map(m => parseFloat(m.replace('m', '')))",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 96,
          "text": "let patchGroups = 0;",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 100,
          "text": "if (meterage - lastMeterage > 1) { // More than 1m apart = new patch",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 101,
          "text": "patchGroups++;",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 106,
          "text": "return patchGroups;",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 110,
          "text": "* STRUCTURAL DEFECT DETECTION",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 112,
          "text": "* Determines if a section requires TP2 patching based on defect codes.",
          "tokens": [
            "patch",
            "patching",
            "DES"
          ]
        },
        {
          "line": 113,
          "text": "* Only structural defects trigger TP2 patching calculations.",
          "tokens": [
            "patch",
            "patching",
            "structural"
          ]
        },
        {
          "line": 115,
          "text": "export function requiresStructuralRepair(defects: string): boolean {",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 119,
          "text": "return TP2_PATCHING_RULES.structuralDefectCodes.some(code =>",
          "tokens": [
            "patch",
            "patching",
            "structural",
            "DES",
            "rules",
            "rule"
          ]
        },
        {
          "line": 120,
          "text": "defectsUpper.includes(code.toUpperCase())",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 125,
          "text": "* TP2 COST CALCULATION FORMULA (UPDATED)",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 127,
          "text": "* Total Cost = Unit Cost × Repair Count",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 128,
          "text": "* Day Rate = P26 Central Configuration (£1650)",
          "tokens": [
            "£",
            "rate"
          ]
        },
        {
          "line": 131,
          "text": "* - Unit Cost comes from pipe-specific patching option (153: £425, 156: £520, 157: £550)",
          "tokens": [
            "cost",
            "£",
            "patch",
            "patching"
          ]
        },
        {
          "line": 133,
          "text": "* - Day Rate comes from P26 central configuration (ID: 162)",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 138,
          "text": "* - Config 157 Double Layer cost = £550",
          "tokens": [
            "cost",
            "£"
          ]
        },
        {
          "line": 139,
          "text": "* - Total cost = £550 × 1 = £550",
          "tokens": [
            "cost",
            "£"
          ]
        },
        {
          "line": 140,
          "text": "* - Min Quantity = 3 patches required for day rate",
          "tokens": [
            "rate",
            "patch"
          ]
        },
        {
          "line": 142,
          "text": "export function calculateTP2Cost(section: any, tp2Config: any, p26Config?: any): {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 143,
          "text": "cost: number | null;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 144,
          "text": "dayRate: number;",
          "tokens": [
            "rate"
          ]
        }
      ]
    },
    {
      "file": "server/utilities-validation.ts",
      "hits": [
        {
          "line": 5,
          "text": "const utilitiesLogicPath = path.join(process.cwd(), 'attached_assets', 'utilities_logic_profile_1751105838603.json');",
          "tokens": [
            "CP"
          ]
        },
        {
          "line": 10,
          "text": "if (fs.existsSync(utilitiesLogicPath)) {",
          "tokens": [
            "CP"
          ]
        },
        {
          "line": 11,
          "text": "UTILITIES_LOGIC_PROFILE = JSON.parse(fs.readFileSync(utilitiesLogicPath, 'utf-8'));",
          "tokens": [
            "CP"
          ]
        },
        {
          "line": 23,
          "text": "operationalLogic: Record<string, boolean>;",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 25,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 28,
          "text": "recommendations: string[];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 35,
          "text": "\"mscc5_defects.json\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 36,
          "text": "\"srm_scoring.json\",",
          "tokens": [
            "SRM",
            "Scoring"
          ]
        },
        {
          "line": 38,
          "text": "\"os19x_adoption.json\",",
          "tokens": [
            "OS19"
          ]
        },
        {
          "line": 57,
          "text": "// 2. Check operational logic",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 59,
          "text": "defectGrading: \"MSCC5-based structural + service grade assignment\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "grade",
            "structural",
            "service",
            "CC"
          ]
        },
        {
          "line": 60,
          "text": "adoptionRules: \"OS19x logic for pass/fail\",",
          "tokens": [
            "OS19",
            "rules",
            "rule"
          ]
        },
        {
          "line": 61,
          "text": "riskAssessment: \"SRM scoring to interpret PLR\",",
          "tokens": [
            "SRM",
            "PLR",
            "Scoring"
          ]
        },
        {
          "line": 62,
          "text": "repairRecommendations: \"Drain Repair Book mapping\",",
          "tokens": [
            "Drain Repair Book",
            "Recommendations",
            "mapping"
          ]
        },
        {
          "line": 67,
          "text": "const operationalLogic: Record<string, boolean> = {",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 68,
          "text": "defectGrading: true, // MSCC5Classifier + WRcStandardsEngine implemented",
          "tokens": [
            "MSCC5",
            "MSCC",
            "WRc",
            "CC",
            "engine"
          ]
        },
        {
          "line": 69,
          "text": "adoptionRules: true, // OS19x adoption standards integrated",
          "tokens": [
            "rate",
            "OS19",
            "rules",
            "rule"
          ]
        },
        {
          "line": 70,
          "text": "riskAssessment: true, // SRM scoring system active",
          "tokens": [
            "SRM",
            "Scoring"
          ]
        },
        {
          "line": 71,
          "text": "repairRecommendations: true, // Drain repair book integrated",
          "tokens": [
            "rate",
            "Drain Repair Book",
            "Recommendations"
          ]
        },
        {
          "line": 72,
          "text": "cleaningActions: true, // Sewer cleaning manual integrated",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 78,
          "text": "\"Structural Grade ≥ 4 → urgent repair flag\": true,",
          "tokens": [
            "grade",
            "structural",
            "FL"
          ]
        },
        {
          "line": 79,
          "text": "\"Service Grade ≥ 4 → cleaning + reinspection\": true,",
          "tokens": [
            "grade",
            "service"
          ]
        },
        {
          "line": 80,
          "text": "\"Root ingress → root cut / reline logic\": true,",
          "tokens": [
            "root cut",
            "reline"
          ]
        },
        {
          "line": 84,
          "text": "// Summary assessment",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 86,
          "text": "const recommendations: string[] = [];",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 92,
          "text": "if (!operationalLogic.exportSupport) {",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 94,
          "text": "recommendations.push(\"Implement CSV/JSON export for Water UK adoption standards\");",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 97,
          "text": "const allFilesLoaded = Object.values(filesLoaded).every(loaded => loaded);",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 98,
          "text": "const allLogicImplemented = Object.values(operationalLogic).every(implemented => implemented);",
          "tokens": [
            "operational",
            "BJ"
          ]
        },
        {
          "line": 99,
          "text": "const allTriggersActive = Object.values(actionTriggers).every(active => active);",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 104,
          "text": "console.table(validationChecklist);",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 106,
          "text": "Object.entries(actionTriggers).forEach(([trigger, status]) => {",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 115,
          "text": "operationalLogic,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 117,
          "text": "summary: {",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 120,
          "text": "recommendations",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 128,
          "text": "grade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 129,
          "text": "type: 'structural' | 'service';",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 130,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 132,
          "text": "urgentRepairFlag: boolean;",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 137,
          "text": "adoptable: boolean;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 140,
          "text": "const { defectCode, grade, type, description } = defectData;",
          "tokens": [
            "grade",
            "DES"
          ]
        },
        {
          "line": 142,
          "text": "let urgentRepairFlag = false;",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 146,
          "text": "let adoptable = true;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 150,
          "text": "// Apply grade escalation logic from profile",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 151,
          "text": "if (logicRouting.grade_escalation) {",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 152,
          "text": "if (type === 'structural' && logicRouting.grade_escalation.structural?.grade_4_or_5 && grade >= 4) {",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 153,
          "text": "urgentRepairFlag = true;",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 155,
          "text": "actions.push('Flag for urgent repair (Grade ≥ 4)');",
          "tokens": [
            "grade",
            "FL"
          ]
        },
        {
          "line": 156,
          "text": "actions.push('Consider excavation or CIPP lining');",
          "tokens": [
            "cipp",
            "excavation",
            "CIPP",
            "DER"
          ]
        },
        {
          "line": 157,
          "text": "adoptable = false; // OS19x standard: reject Grade ≥ 4",
          "tokens": [
            "OS19",
            "grade",
            "Table"
          ]
        }
      ]
    },
    {
      "file": "server/utils/extractSeverityGrades.ts",
      "hits": [
        {
          "line": 1,
          "text": "// utils/extractSeverityGrades.ts",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 2,
          "text": "export function extractSeverityGradesFromSecstat(secstatRow: any) {",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 3,
          "text": "if (!secstatRow) return { structural: null, service: null };",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 5,
          "text": "// Use STA_HighestGrade which contains the authentic severity grade from MSCC5 analysis",
          "tokens": [
            "MSCC5",
            "MSCC",
            "grade",
            "CC"
          ]
        },
        {
          "line": 6,
          "text": "// Check STA_Type to determine if this is structural (STR) or operational (OPE)",
          "tokens": [
            "structural",
            "operational"
          ]
        },
        {
          "line": 9,
          "text": "structural: typeof secstatRow.STA_HighestGrade === 'number' ? secstatRow.STA_HighestGrade : null,",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 10,
          "text": "service: null,",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 14,
          "text": "structural: null,",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 15,
          "text": "service: typeof secstatRow.STA_HighestGrade === 'number' ? secstatRow.STA_HighestGrade : null,",
          "tokens": [
            "grade",
            "service"
          ]
        },
        {
          "line": 19,
          "text": "// Fallback to check multiple grade fields if no STA_Type field",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 20,
          "text": "const grade = secstatRow.STA_HighestGrade || secstatRow.STA_FinalGradeAuto || secstatRow.STA_FinalGradeManu || secstatRow.STA_OverallGrade;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 22,
          "text": "structural: typeof grade === 'number' ? grade : null,",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 23,
          "text": "service: null, // Default to structural if type unknown",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 27,
          "text": "// Enhanced MSCC5 defect code analysis for fallback classification",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 28,
          "text": "function classifyDefectByMSCC5Standards(observationText: string): { structural: number | null, service: number | null } {",
          "tokens": [
            "MSCC5",
            "MSCC",
            "structural",
            "service",
            "CC"
          ]
        },
        {
          "line": 29,
          "text": "if (!observationText || observationText === 'No service or structural defect found') {",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 30,
          "text": "return { structural: 0, service: 0 };",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 34,
          "text": "let structuralGrade: number | null = null;",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 35,
          "text": "let serviceGrade: number | null = null;",
          "tokens": [
            "grade",
            "service"
          ]
        },
        {
          "line": 37,
          "text": "// MSCC5 Classification Rules - Structural Defects",
          "tokens": [
            "MSCC5",
            "MSCC",
            "structural",
            "CC",
            "rules",
            "rule"
          ]
        },
        {
          "line": 39,
          "text": "// Fractures (FC) - Grade 3-5 based on severity",
          "tokens": [
            "grade",
            "FC"
          ]
        },
        {
          "line": 40,
          "text": "if (upperText.includes('FRACTURE') || upperText.includes('FC ')) {",
          "tokens": [
            "DES",
            "FC"
          ]
        },
        {
          "line": 44,
          "text": "if (percentage >= 30 || upperText.includes('SEVERE') || upperText.includes('COLLAPSE')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 45,
          "text": "structuralGrade = 5; // Critical failure",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 46,
          "text": "} else if (percentage >= 20 || upperText.includes('MAJOR')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 47,
          "text": "structuralGrade = 4; // Significant deterioration",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 49,
          "text": "structuralGrade = 3; // Moderate deterioration",
          "tokens": [
            "rate",
            "grade",
            "structural",
            "DER"
          ]
        },
        {
          "line": 53,
          "text": "// Cracks (CR) - Grade 1-4 based on type and extent",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 54,
          "text": "else if (upperText.includes('CRACK') || upperText.includes('CR ')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 55,
          "text": "if (upperText.includes('LONGITUDINAL') && upperText.includes('CIRCUMFERENTIAL')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 56,
          "text": "structuralGrade = 4; // Multiple crack types = severe",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 57,
          "text": "} else if (upperText.includes('CIRCUMFERENTIAL') || upperText.includes('SPIRAL')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 58,
          "text": "structuralGrade = 3; // Critical crack patterns",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 59,
          "text": "} else if (upperText.includes('LONGITUDINAL')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 60,
          "text": "structuralGrade = 2; // Less critical but structural",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 62,
          "text": "structuralGrade = 2; // Minor cracks",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 66,
          "text": "// Deformation (D) - Grade 2-5 based on percentage",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 67,
          "text": "else if (upperText.includes('DEFORMATION') || upperText.includes('D ')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 72,
          "text": "structuralGrade = 5; // Severe deformation",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 74,
          "text": "structuralGrade = 4; // Major deformation",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 76,
          "text": "structuralGrade = 3; // Moderate deformation",
          "tokens": [
            "rate",
            "grade",
            "structural",
            "DER"
          ]
        },
        {
          "line": 78,
          "text": "structuralGrade = 2; // Minor deformation",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 82,
          "text": "// Joint Defects (JDL, JDM) - Grade 2-4",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 83,
          "text": "else if (upperText.includes('JOINT') && (upperText.includes('DISPLACED') || upperText.includes('JD'))) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 84,
          "text": "if (upperText.includes('SEVERE') || upperText.includes('MAJOR')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 85,
          "text": "structuralGrade = 4;",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 86,
          "text": "} else if (upperText.includes('MODERATE')) {",
          "tokens": [
            "rate",
            "DER",
            "DES"
          ]
        },
        {
          "line": 87,
          "text": "structuralGrade = 3;",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 89,
          "text": "structuralGrade = 2;",
          "tokens": [
            "grade",
            "structural"
          ]
        },
        {
          "line": 93,
          "text": "// MSCC5 Classification Rules - Service Defects",
          "tokens": [
            "MSCC5",
            "MSCC",
            "service",
            "CC",
            "rules",
            "rule"
          ]
        }
      ]
    },
    {
      "file": "server/vehicle-defaults.ts",
      "hits": [
        {
          "line": 1,
          "text": "// Vehicle default fuel consumption and cost data based on UK commercial vehicle industry standards",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 13,
          "text": "'32t': 9.0,    // Maximum weight artics - average 8-10 MPG",
          "tokens": [
            "weight"
          ]
        },
        {
          "line": 31,
          "text": "'32t': 19.00,   // Maximum weight HGV drivers",
          "tokens": [
            "weight"
          ]
        },
        {
          "line": 34,
          "text": "// Vehicle running costs per mile (maintenance, insurance, depreciation)",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 35,
          "text": "export const DEFAULT_RUNNING_COSTS = {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 36,
          "text": "'3.5t': 0.25,   // £0.25 per mile",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 37,
          "text": "'5.0t': 0.30,   // £0.30 per mile",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 38,
          "text": "'7.5t': 0.40,   // £0.40 per mile",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 39,
          "text": "'10t': 0.50,    // £0.50 per mile",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 40,
          "text": "'12t': 0.60,    // £0.60 per mile",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 41,
          "text": "'18t': 0.75,    // £0.75 per mile",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 42,
          "text": "'26t': 0.85,    // £0.85 per mile",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 43,
          "text": "'32t': 0.95,    // £0.95 per mile",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 49,
          "text": "const fuelCostPerLitre = (CURRENT_FUEL_PRICES.diesel / 100).toFixed(3); // Convert pence to pounds",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 51,
          "text": "const vehicleRunningCostPerMile = DEFAULT_RUNNING_COSTS[vehicleType as keyof typeof DEFAULT_RUNNING_COSTS] || 0.50;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 54,
          "text": "const weightMatch = vehicleType.match(/(\\d+(?:\\.\\d+)?)[t]/i);",
          "tokens": [
            "weight"
          ]
        },
        {
          "line": 55,
          "text": "const weight = weightMatch ? parseFloat(weightMatch[1]) : 0;",
          "tokens": [
            "FL",
            "weight"
          ]
        },
        {
          "line": 56,
          "text": "const hasAssistant = weight >= 18; // 18t and above typically have assistants",
          "tokens": [
            "weight"
          ]
        },
        {
          "line": 61,
          "text": "fuelCostPerLitre,",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 65,
          "text": "vehicleRunningCostPerMile: vehicleRunningCostPerMile.toString(),",
          "tokens": [
            "cost"
          ]
        }
      ]
    },
    {
      "file": "server/wincan-db-reader-backup.ts",
      "hits": [
        {
          "line": 2,
          "text": "* WINCAN DATABASE READER - AUTHENTIC DATA EXTRACTION ONLY",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 6,
          "text": "* LOCKDOWN RULES:",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 8,
          "text": "* 2. Never generate synthetic/mock/placeholder data",
          "tokens": [
            "rate",
            "DER"
          ]
        },
        {
          "line": 9,
          "text": "* 3. Use proper database relationships and column mapping",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 13,
          "text": "* - NODE table: OBJ_PK (GUID) → OBJ_Key (SW01, SW02, FW01...)",
          "tokens": [
            "BJ",
            "Table"
          ]
        },
        {
          "line": 14,
          "text": "* - SECTION table: OBJ_FromNode_REF/OBJ_ToNode_REF links to NODE OBJ_PK",
          "tokens": [
            "REF",
            "BJ",
            "Table"
          ]
        },
        {
          "line": 15,
          "text": "* - SECOBS table: OBJ_Section_REF links to SECTION OBJ_PK for observation data",
          "tokens": [
            "REF",
            "BJ",
            "Table"
          ]
        },
        {
          "line": 17,
          "text": "* - Manhole mapping: manholeMap for GUID→readable name conversion",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 18,
          "text": "* - Observation mapping: observationMap for authentic observation codes",
          "tokens": [
            "DES",
            "mapping"
          ]
        },
        {
          "line": 23,
          "text": "// Wincan Database Reader - Extract inspection data from .db3 files",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 29,
          "text": "import { getSeverityGradesBySection, extractSeverityGradesFromSecstat } from \"./utils/extractSeverityGrades\";",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 32,
          "text": "// Multi-defect splitting enabled - sections with both service and structural defects will be split",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 36,
          "text": "// Define remark mappings for common observation codes",
          "tokens": [
            "DES",
            "mapping"
          ]
        },
        {
          "line": 37,
          "text": "const remarkMappings: Record<string, string> = {",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 38,
          "text": "'SA': 'Due to camera under water',",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 39,
          "text": "'CUW': 'Camera under water',",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 42,
          "text": "'OF': 'Due to overflow conditions',",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 49,
          "text": "for (const [code, remark] of Object.entries(remarkMappings)) {",
          "tokens": [
            "BJ",
            "mapping"
          ]
        },
        {
          "line": 57,
          "text": "if (!observation.includes(remark)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 68,
          "text": "// Format observation text with defect codes prefixed for MSCC5 classification",
          "tokens": [
            "MSCC5",
            "MSCC",
            "DES",
            "REF",
            "CC"
          ]
        },
        {
          "line": 69,
          "text": "// JN codes only display if structural defect within one meter of junction",
          "tokens": [
            "structural",
            "DES",
            "JN"
          ]
        },
        {
          "line": 72,
          "text": "// STEP 1: Check for belly conditions requiring excavation using MSCC5 classifier",
          "tokens": [
            "excavation",
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 73,
          "text": "const { MSCC5Classifier } = await import('./mscc5-classifier');",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 75,
          "text": "const bellyAnalysis = await MSCC5Classifier.analyzeBellyCondition(combinedObservations, sector);",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 78,
          "text": "const preFiltered = observations.filter(obs => {",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 79,
          "text": "const isWaterLevel = obs.includes('Water level') || obs.includes('WL ') || obs.includes('WL(');",
          "tokens": [
            "WL",
            "DES"
          ]
        },
        {
          "line": 82,
          "text": "// Only keep water level observations if they are part of a belly condition requiring excavation",
          "tokens": [
            "excavation"
          ]
        },
        {
          "line": 94,
          "text": "if (preFiltered.length === 0) {",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 98,
          "text": "// STEP 3: Simple defect code extraction and prefixing",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 101,
          "text": "for (const obs of preFiltered) {",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 102,
          "text": "// Extract defect code from observation (DES, CR, WL, FC, etc.)",
          "tokens": [
            "WL",
            "DES",
            "FC"
          ]
        },
        {
          "line": 113,
          "text": "// Try to identify defect type from content and prefix appropriate code",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 115,
          "text": "let prefixCode = '';",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 117,
          "text": "if (obsLower.includes('deposit') && obsLower.includes('fine')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 118,
          "text": "prefixCode = 'DES';",
          "tokens": [
            "DES",
            "REF"
          ]
        },
        {
          "line": 119,
          "text": "} else if (obsLower.includes('deposit') && obsLower.includes('coarse')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 120,
          "text": "prefixCode = 'DER';",
          "tokens": [
            "DER",
            "REF"
          ]
        },
        {
          "line": 121,
          "text": "} else if (obsLower.includes('water level')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 122,
          "text": "prefixCode = 'WL';",
          "tokens": [
            "WL",
            "REF"
          ]
        },
        {
          "line": 123,
          "text": "} else if (obsLower.includes('crack') && obsLower.includes('longitudinal')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 124,
          "text": "prefixCode = 'CR';",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 125,
          "text": "} else if (obsLower.includes('fracture') && obsLower.includes('circumferential')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 126,
          "text": "prefixCode = 'FC';",
          "tokens": [
            "REF",
            "FC"
          ]
        },
        {
          "line": 127,
          "text": "} else if (obsLower.includes('fracture') && obsLower.includes('longitudinal')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 128,
          "text": "prefixCode = 'FL';",
          "tokens": [
            "REF",
            "FL"
          ]
        },
        {
          "line": 129,
          "text": "} else if (obsLower.includes('deformation')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 130,
          "text": "prefixCode = 'D';",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 131,
          "text": "} else if (obsLower.includes('junction')) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 132,
          "text": "prefixCode = 'JN';",
          "tokens": [
            "JN",
            "REF"
          ]
        },
        {
          "line": 135,
          "text": "if (prefixCode) {",
          "tokens": [
            "REF"
          ]
        }
      ]
    },
    {
      "file": "server/wincan-db-reader.ts",
      "hits": [
        {
          "line": 2,
          "text": "* WINCAN DATABASE READER - AUTHENTIC DATA EXTRACTION ONLY",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 6,
          "text": "* LOCKDOWN RULES:",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 8,
          "text": "* 2. Never generate synthetic/mock/placeholder data",
          "tokens": [
            "rate",
            "DER"
          ]
        },
        {
          "line": 9,
          "text": "* 3. Use proper database relationships and column mapping",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 13,
          "text": "* - NODE table: OBJ_PK (GUID) → OBJ_Key (SW01, SW02, FW01...)",
          "tokens": [
            "BJ",
            "Table"
          ]
        },
        {
          "line": 14,
          "text": "* - SECTION table: OBJ_FromNode_REF/OBJ_ToNode_REF links to NODE OBJ_PK",
          "tokens": [
            "REF",
            "BJ",
            "Table"
          ]
        },
        {
          "line": 15,
          "text": "* - SECOBS table: OBJ_Section_REF links to SECTION OBJ_PK for observation data",
          "tokens": [
            "REF",
            "BJ",
            "Table"
          ]
        },
        {
          "line": 17,
          "text": "* - Manhole mapping: manholeMap for GUID→readable name conversion",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 18,
          "text": "* - Observation mapping: observationMap for authentic observation codes",
          "tokens": [
            "DES",
            "mapping"
          ]
        },
        {
          "line": 23,
          "text": "// Wincan Database Reader - Extract inspection data from .db3 files",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 29,
          "text": "import { getSeverityGradesBySection, extractSeverityGradesFromSecstat } from \"./utils/extractSeverityGrades\";",
          "tokens": [
            "grade",
            "grades",
            "DES"
          ]
        },
        {
          "line": 32,
          "text": "// Multi-defect splitting enabled - sections with both service and structural defects will be split",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 45,
          "text": "recommendations: string;",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 46,
          "text": "severityGrade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 47,
          "text": "adoptable: string;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 55,
          "text": "// Define remark mappings for common observation codes",
          "tokens": [
            "DES",
            "mapping"
          ]
        },
        {
          "line": 56,
          "text": "const remarkMappings: Record<string, string> = {",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 57,
          "text": "'SA': 'Due to camera under water',",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 58,
          "text": "'CUW': 'Camera under water',",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 61,
          "text": "'OF': 'Due to overflow conditions',",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 68,
          "text": "for (const [code, remark] of Object.entries(remarkMappings)) {",
          "tokens": [
            "BJ",
            "mapping"
          ]
        },
        {
          "line": 76,
          "text": "if (!observation.includes(remark)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 87,
          "text": "// Format observation text with defect codes prefixed for MSCC5 classification",
          "tokens": [
            "MSCC5",
            "MSCC",
            "DES",
            "REF",
            "CC"
          ]
        },
        {
          "line": 88,
          "text": "// JN codes only display if patching defect within 0.7m requires cut access",
          "tokens": [
            "patch",
            "patching",
            "DES",
            "JN",
            "CC"
          ]
        },
        {
          "line": 91,
          "text": "// STEP 1: Check for belly conditions requiring excavation using MSCC5 classifier",
          "tokens": [
            "excavation",
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 92,
          "text": "const { MSCC5Classifier } = await import('./mscc5-classifier');",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 94,
          "text": "const bellyAnalysis = await MSCC5Classifier.analyzeBellyCondition(combinedObservations, sector);",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 96,
          "text": "// STEP 2: Filter observations - remove service/structural codes and finish nodes",
          "tokens": [
            "structural",
            "service",
            "DES"
          ]
        },
        {
          "line": 97,
          "text": "const preFiltered = observations.filter(obs => {",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 98,
          "text": "const isWaterLevel = obs.includes('Water level') || obs.includes('WL ') || obs.includes('WL(');",
          "tokens": [
            "WL",
            "DES"
          ]
        },
        {
          "line": 99,
          "text": "const isFinishNode = obs.includes('CPF ') || obs.includes('COF ') || obs.includes('OCF ') ||",
          "tokens": [
            "DES",
            "CP"
          ]
        },
        {
          "line": 100,
          "text": "obs.includes('CP (') || obs.includes('OC (') || obs.includes('MHF ') ||",
          "tokens": [
            "DES",
            "CP"
          ]
        },
        {
          "line": 101,
          "text": "obs.includes('Finish node') || obs.includes('Start node');",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 103,
          "text": "// Remove service codes (SER) and structural codes (STR) - these are non-defect observations",
          "tokens": [
            "structural",
            "service",
            "DES"
          ]
        },
        {
          "line": 104,
          "text": "const isServiceCode = obs.includes('SER ') || obs.includes('SER(');",
          "tokens": [
            "service",
            "DES"
          ]
        },
        {
          "line": 105,
          "text": "const isStructuralCode = obs.includes('STR ') || obs.includes('STR(');",
          "tokens": [
            "structural",
            "DES"
          ]
        },
        {
          "line": 107,
          "text": "if (isFinishNode || isServiceCode || isStructuralCode) {",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 119,
          "text": "// Define observation code meanings for reference",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 120,
          "text": "const observationCodes: { [key: string]: string } = {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 121,
          "text": "'WL': 'Water level',",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 123,
          "text": "'FC': 'Fracture - circumferential',",
          "tokens": [
            "FC"
          ]
        },
        {
          "line": 124,
          "text": "'FL': 'Fracture - longitudinal',",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 126,
          "text": "'JN': 'Junction',",
          "tokens": [
            "JN"
          ]
        },
        {
          "line": 134,
          "text": "'CPF': 'Catchpit/node feature'",
          "tokens": [
            "CP"
          ]
        },
        {
          "line": 140,
          "text": "const structuralDefectPositions: number[] = [];",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 142,
          "text": "// STEP 2: First pass - identify junction positions and structural defects",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 143,
          "text": "for (const obs of preFiltered) {",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 147,
          "text": "const meterage = parseFloat(codeMatch[2]);",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 149,
          "text": "if (code === 'JN' || code === 'CN') {",
          "tokens": [
            "JN"
          ]
        },
        {
          "line": 153,
          "text": "// Identify structural defects for junction proximity check",
          "tokens": [
            "structural"
          ]
        }
      ]
    },
    {
      "file": "server/workflow-tracker.ts",
      "hits": [
        {
          "line": 1,
          "text": "// COMPREHENSIVE WORKFLOW TRACKING SYSTEM",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 4,
          "text": "export interface WorkflowStep {",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 24,
          "text": "export class WorkflowTracker {",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 25,
          "text": "private steps: WorkflowStep[] = [];",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 58,
          "text": "generateAnalysis(): SectionAnalysis {",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 70,
          "text": "if (!itemNumbers.includes(i)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 81,
          "text": "const duplicateItems = Object.keys(itemCounts)",
          "tokens": [
            "BJ"
          ]
        },
        {
          "line": 103,
          "text": "const analysis = this.generateAnalysis();",
          "tokens": [
            "rate"
          ]
        }
      ]
    },
    {
      "file": "server/wrc-mapping.json",
      "hits": [
        {
          "line": 3,
          "text": "\"notes\": \"Local, deterministic mapping of MSCC/OS19x codes to recommended actions. Edit and commit to change behaviour for ALL future uploads.\",",
          "tokens": [
            "MSCC",
            "OS19",
            "DES",
            "CC",
            "mapping"
          ]
        },
        {
          "line": 8,
          "text": "\"wr_ref\": \"MSCC5 – Unmapped code\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "REF",
            "CC"
          ]
        },
        {
          "line": 9,
          "text": "\"operational_action\": 15,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 10,
          "text": "\"rationale\": \"Code not found in local mapping; schedule targeted reinspection.\"",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 13,
          "text": "\"rules\": [",
          "tokens": [
            "rules",
            "rule"
          ]
        },
        {
          "line": 15,
          "text": "\"when\": { \"code_regex\": \"^(WL)$\", \"min_grade\": 2 },",
          "tokens": [
            "grade",
            "WL"
          ]
        },
        {
          "line": 19,
          "text": "\"wr_ref\": \"OS19x – Water level restriction\",",
          "tokens": [
            "OS19",
            "REF"
          ]
        },
        {
          "line": 20,
          "text": "\"operational_action\": 3,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 21,
          "text": "\"rationale\": \"Elevated water level impeding inspection; clean/flush and reassess.\"",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 25,
          "text": "\"when\": { \"code_regex\": \"^(DER)$\", \"min_grade\": 2 },",
          "tokens": [
            "grade",
            "DER"
          ]
        },
        {
          "line": 27,
          "text": "\"rec_type\": \"patch\",",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 29,
          "text": "\"wr_ref\": \"MSCC5 – Deformation\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "REF",
            "CC"
          ]
        },
        {
          "line": 30,
          "text": "\"operational_action\": 4,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 31,
          "text": "\"rationale\": \"Localised deformation ≥ grade 2; install patch per WRc guidance.\"",
          "tokens": [
            "patch",
            "WRc",
            "grade"
          ]
        },
        {
          "line": 35,
          "text": "\"when\": { \"code_regex\": \"^(LL)$\", \"min_grade\": 2 },",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 37,
          "text": "\"rec_type\": \"liner\",",
          "tokens": [
            "liner"
          ]
        },
        {
          "line": 39,
          "text": "\"wr_ref\": \"MSCC5 – Longitudinal crack/fracture\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "REF",
            "CC"
          ]
        },
        {
          "line": 40,
          "text": "\"operational_action\": 7,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 41,
          "text": "\"rationale\": \"Distributed longitudinal defects; consider CIPP lining.\"",
          "tokens": [
            "cipp",
            "CIPP",
            "DER"
          ]
        },
        {
          "line": 45,
          "text": "\"when\": { \"code_regex\": \"^(JN)$\", \"min_grade\": 2 },",
          "tokens": [
            "grade",
            "JN"
          ]
        },
        {
          "line": 47,
          "text": "\"rec_type\": \"patch\",",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 49,
          "text": "\"wr_ref\": \"MSCC5 – Joint anomaly\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "REF",
            "CC"
          ]
        },
        {
          "line": 50,
          "text": "\"operational_action\": 4,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 55,
          "text": "\"when\": { \"code_regex\": \"^(CP)$\", \"min_grade\": 2 },",
          "tokens": [
            "grade",
            "CP"
          ]
        },
        {
          "line": 59,
          "text": "\"wr_ref\": \"OS19x – Cementitious projection/obstruction\",",
          "tokens": [
            "OS19",
            "REF"
          ]
        },
        {
          "line": 60,
          "text": "\"operational_action\": 2,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 65,
          "text": "\"when\": { \"code_regex\": \"^(REF)$\", \"min_grade\": 2 },",
          "tokens": [
            "grade",
            "REF"
          ]
        },
        {
          "line": 69,
          "text": "\"wr_ref\": \"MSCC5 – Reflection/glare\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "REF",
            "CC",
            "FL"
          ]
        },
        {
          "line": 70,
          "text": "\"operational_action\": 15,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 71,
          "text": "\"rationale\": \"Imaging artefact; repeat inspection after cleaning/flow control.\"",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 75,
          "text": "\"when\": { \"code_regex\": \"^(RG)$\", \"min_grade\": 2 },",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 79,
          "text": "\"wr_ref\": \"OS19x – Root ingress\",",
          "tokens": [
            "OS19",
            "REF"
          ]
        },
        {
          "line": 80,
          "text": "\"operational_action\": 2,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 81,
          "text": "\"rationale\": \"Roots present; root cut/clean and reassess for structural impact.\"",
          "tokens": [
            "root cut",
            "structural"
          ]
        },
        {
          "line": 85,
          "text": "\"when\": { \"code_regex\": \"^(OF|JS)$\", \"min_grade\": 3 },",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 87,
          "text": "\"rec_type\": \"liner\",",
          "tokens": [
            "liner"
          ]
        },
        {
          "line": 89,
          "text": "\"wr_ref\": \"MSCC5 – Offset/Joint step ≥ 3\",",
          "tokens": [
            "MSCC5",
            "MSCC",
            "REF",
            "CC"
          ]
        },
        {
          "line": 90,
          "text": "\"operational_action\": 7,",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 91,
          "text": "\"rationale\": \"Significant joint displacement; lining preferred over local patch.\"",
          "tokens": [
            "patch",
            "REF"
          ]
        }
      ]
    },
    {
      "file": "server/wrc-processor.ts",
      "hits": [
        {
          "line": 2,
          "text": "* WRc MSCC5 Standards Processor",
          "tokens": [
            "MSCC5",
            "MSCC",
            "WRc",
            "CC"
          ]
        },
        {
          "line": 3,
          "text": "* Applies deterministic mapping of defect codes to recommended actions",
          "tokens": [
            "DES",
            "mapping"
          ]
        },
        {
          "line": 4,
          "text": "* Based on WRc Drain Repair Book (4th Ed.) and OS19x standards",
          "tokens": [
            "OS19",
            "Drain Repair Book",
            "WRc"
          ]
        },
        {
          "line": 10,
          "text": "interface WRcRule {",
          "tokens": [
            "WRc",
            "rule"
          ]
        },
        {
          "line": 13,
          "text": "min_grade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 18,
          "text": "wr_ref: string;",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 19,
          "text": "operational_action: number;",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 24,
          "text": "interface WRcMapping {",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 31,
          "text": "wr_ref: string;",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 32,
          "text": "operational_action: number;",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 36,
          "text": "rules: WRcRule[];",
          "tokens": [
            "WRc",
            "rules",
            "rule"
          ]
        },
        {
          "line": 41,
          "text": "grade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 46,
          "text": "interface WRcRecommendation {",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 49,
          "text": "wr_ref: string;",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 50,
          "text": "operational_action: number;",
          "tokens": [
            "operational"
          ]
        },
        {
          "line": 52,
          "text": "matched_rule?: string;",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 55,
          "text": "let wrcMapping: WRcMapping | null = null;",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 58,
          "text": "* Load WRc mapping configuration from JSON file",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 60,
          "text": "function loadWRcMapping(): WRcMapping {",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 61,
          "text": "if (wrcMapping) return wrcMapping;",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 64,
          "text": "const mappingPath = path.join(process.cwd(), 'server', 'wrc-mapping.json');",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 65,
          "text": "const mappingData = fs.readFileSync(mappingPath, 'utf-8');",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 66,
          "text": "wrcMapping = JSON.parse(mappingData);",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 67,
          "text": "console.log(`📋 Loaded WRc mapping v${wrcMapping?.version}`);",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 68,
          "text": "return wrcMapping!;",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 70,
          "text": "console.error('❌ Failed to load WRc mapping:', error);",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 71,
          "text": "throw new Error('WRc mapping configuration not found');",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 76,
          "text": "* Apply WRc standards to generate recommendations for defect observations",
          "tokens": [
            "rate",
            "WRc",
            "Recommendations"
          ]
        },
        {
          "line": 78,
          "text": "export function processWRcRecommendations(observations: DefectObservation[]): WRcRecommendation[] {",
          "tokens": [
            "WRc",
            "Recommendations"
          ]
        },
        {
          "line": 79,
          "text": "const mapping = loadWRcMapping();",
          "tokens": [
            "WRc",
            "mapping"
          ]
        },
        {
          "line": 80,
          "text": "const recommendations: WRcRecommendation[] = [];",
          "tokens": [
            "WRc",
            "Recommendations"
          ]
        },
        {
          "line": 85,
          "text": "// Check each rule for a match",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 86,
          "text": "for (const rule of mapping.rules) {",
          "tokens": [
            "rules",
            "rule",
            "mapping"
          ]
        },
        {
          "line": 87,
          "text": "const regex = new RegExp(rule.when.code_regex);",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 89,
          "text": "if (regex.test(obs.code) && obs.grade >= rule.when.min_grade) {",
          "tokens": [
            "grade",
            "rule"
          ]
        },
        {
          "line": 90,
          "text": "recommendations.push({",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 91,
          "text": "...rule.outcome,",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 92,
          "text": "matched_rule: `${obs.code} grade ${obs.grade} → ${rule.outcome.rec_type}`",
          "tokens": [
            "grade",
            "rule"
          ]
        },
        {
          "line": 99,
          "text": "// Apply default if no rule matched",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 101,
          "text": "recommendations.push({",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 102,
          "text": "...mapping.defaults.unknown,",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 103,
          "text": "matched_rule: `${obs.code} grade ${obs.grade} → unmapped (default)`",
          "tokens": [
            "grade",
            "rule"
          ]
        },
        {
          "line": 108,
          "text": "return recommendations;",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 112,
          "text": "* Generate section-level recommendations based on defects",
          "tokens": [
            "rate",
            "Recommendations"
          ]
        },
        {
          "line": 114,
          "text": "export function generateSectionRecommendations(",
          "tokens": [
            "rate",
            "Recommendations"
          ]
        },
        {
          "line": 117,
          "text": "defectGrade: number",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 119,
          "text": "primary_recommendation: WRcRecommendation;",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 120,
          "text": "all_recommendations: WRcRecommendation[];",
          "tokens": [
            "WRc",
            "Recommendations"
          ]
        },
        {
          "line": 121,
          "text": "summary: string;",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 127,
          "text": "// Parse defects like \"WL at 0m; DER at 1.8m, 20.47m; LL at 15.52m\"",
          "tokens": [
            "WL",
            "DER"
          ]
        }
      ]
    },
    {
      "file": "server/wrc-standards-engine.ts",
      "hits": [
        {
          "line": 11,
          "text": "const MSCC5_DEFECTS = loadJsonFile('mscc5_defects_1751041682277.json');",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 12,
          "text": "const SRM_SCORING = loadJsonFile('srm_scoring_1751103611940.json');",
          "tokens": [
            "SRM",
            "Scoring"
          ]
        },
        {
          "line": 13,
          "text": "const OS19X_ADOPTION = loadJsonFile('os19x_adoption_1751104089690.json');",
          "tokens": [
            "OS19"
          ]
        },
        {
          "line": 17,
          "text": "export interface WRcAnalysisResult {",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 19,
          "text": "defectDescription: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 20,
          "text": "severityGrade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 21,
          "text": "defectType: 'structural' | 'service';",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 22,
          "text": "srmGrading: {",
          "tokens": [
            "SRM"
          ]
        },
        {
          "line": 23,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 26,
          "text": "adoptable: boolean;",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 32,
          "text": "adoptable: 'Yes' | 'No' | 'Conditional';",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 34,
          "text": "estimatedCost: string;",
          "tokens": [
            "cost",
            "estimate"
          ]
        },
        {
          "line": 38,
          "text": "export class WRcStandardsEngine {",
          "tokens": [
            "WRc",
            "engine"
          ]
        },
        {
          "line": 40,
          "text": "* Apply all WRc standards to analyze defect data with optional user cost bands",
          "tokens": [
            "cost",
            "WRc"
          ]
        },
        {
          "line": 47,
          "text": "userCostBands?: { [key: number]: string };",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 48,
          "text": "}): WRcAnalysisResult {",
          "tokens": [
            "WRc"
          ]
        },
        {
          "line": 51,
          "text": "// Step 1: Use mscc5_defects.json for raw defect-to-grade logic",
          "tokens": [
            "MSCC5",
            "MSCC",
            "grade",
            "CC"
          ]
        },
        {
          "line": 52,
          "text": "const defectClassification = this.classifyDefectFromMSCC5(defectText);",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 54,
          "text": "// Step 2: Use srm_scoring.json for interpreting grades into risk/actions",
          "tokens": [
            "SRM",
            "grade",
            "grades",
            "DES",
            "Scoring"
          ]
        },
        {
          "line": 55,
          "text": "const srmGrading = this.getSRMGrading(defectClassification.grade, defectClassification.type);",
          "tokens": [
            "SRM",
            "grade"
          ]
        },
        {
          "line": 57,
          "text": "// Step 3: Use os19x_adoption.json to check whether a section is adoptable",
          "tokens": [
            "OS19",
            "Table"
          ]
        },
        {
          "line": 60,
          "text": "// Step 4: Use drain_repair_book.json for matching defects to recommendations",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 63,
          "text": "// Step 5: Use sewer_cleaning.json for mapping obstructions to cleaning tasks",
          "tokens": [
            "mapping"
          ]
        },
        {
          "line": 66,
          "text": "// Calculate cost estimate",
          "tokens": [
            "cost",
            "estimate"
          ]
        },
        {
          "line": 67,
          "text": "const costBands = {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 68,
          "text": "0: '£0',",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 69,
          "text": "1: '£0-500',",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 70,
          "text": "2: '£500-2,000',",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 71,
          "text": "3: '£2,000-10,000',",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 72,
          "text": "4: '£10,000-50,000',",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 73,
          "text": "5: '£50,000+'",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 78,
          "text": "defectDescription: defectClassification.description,",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 79,
          "text": "severityGrade: defectClassification.grade,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 81,
          "text": "srmGrading,",
          "tokens": [
            "SRM"
          ]
        },
        {
          "line": 86,
          "text": "adoptable: adoptionResult.adoptable,",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 88,
          "text": "estimatedCost: WRcStandardsEngine.getEstimatedCost(defectClassification.grade, data.userCostBands),",
          "tokens": [
            "cost",
            "estimate",
            "WRc",
            "grade",
            "engine"
          ]
        },
        {
          "line": 94,
          "text": "* Classify defect using MSCC5 standards",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 96,
          "text": "private static classifyDefectFromMSCC5(defectText: string): {",
          "tokens": [
            "MSCC5",
            "MSCC",
            "CC"
          ]
        },
        {
          "line": 98,
          "text": "description: string;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 99,
          "text": "grade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 100,
          "text": "type: 'structural' | 'service';",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 106,
          "text": "if (normalizedText.includes('no action required') || normalizedText.includes('acceptable condition')) {",
          "tokens": [
            "DES",
            "CC",
            "Table"
          ]
        },
        {
          "line": 109,
          "text": "description: 'No action required pipe observed in acceptable structural and service condition',",
          "tokens": [
            "structural",
            "service",
            "DES",
            "CC",
            "Table"
          ]
        },
        {
          "line": 110,
          "text": "grade: 0,",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 111,
          "text": "type: 'service',",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 112,
          "text": "risk: 'Pipe in acceptable condition'",
          "tokens": [
            "CC",
            "Table"
          ]
        },
        {
          "line": 116,
          "text": "// Match against MSCC5 defect codes",
          "tokens": [
            "MSCC5",
            "MSCC",
            "DES",
            "CC"
          ]
        },
        {
          "line": 117,
          "text": "for (const [code, defect] of Object.entries(MSCC5_DEFECTS)) {",
          "tokens": [
            "MSCC5",
            "MSCC",
            "BJ",
            "CC"
          ]
        },
        {
          "line": 119,
          "text": "if (this.matchesDefectPattern(normalizedText, code, defectData.description)) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 122,
          "text": "description: defectData.description,",
          "tokens": [
            "DES"
          ]
        }
      ]
    },
    {
      "file": "src/config/standards.ts",
      "hits": [
        {
          "line": 2,
          "text": "// Single source of truth for which rulebook is active and how categories behave.",
          "tokens": [
            "rule"
          ]
        },
        {
          "line": 5,
          "text": "export type Category = \"STRUCTURAL\" | \"SERVICE\";",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 6,
          "text": "export type WrcCode =",
          "tokens": [
            "WRc",
            "CC"
          ]
        },
        {
          "line": 7,
          "text": "// structural (examples)",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 8,
          "text": "| \"CC\" | \"CMJ\" | \"FC\" | \"FCJ\" | \"FMJ\" | \"BJ\" | \"JDL\" | \"XP\"",
          "tokens": [
            "FC",
            "BJ",
            "CC",
            "CMJ",
            "FCJ"
          ]
        },
        {
          "line": 9,
          "text": "// service/operational (examples)",
          "tokens": [
            "service",
            "operational"
          ]
        },
        {
          "line": 10,
          "text": "| \"DER\" | \"DEE\" | \"DEF\" | \"DES\" | \"RM\" | \"RMJ\" | \"RFJ\" | \"CXD\" | \"CXI\"",
          "tokens": [
            "DER",
            "DES",
            "RMJ"
          ]
        },
        {
          "line": 12,
          "text": "| \"WL\" | \"JN\" | \"CP\" | \"MH\" | \"OCF\" | \"GYF\" | \"SA\" | \"ISJ\" | \"CN\"",
          "tokens": [
            "WL",
            "JN",
            "CP"
          ]
        },
        {
          "line": 13,
          "text": "// authentic WinCan codes from genuine database",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 14,
          "text": "| \"LL\" | \"REF\" | \"OF\" | \"JS\";",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 16,
          "text": "export const ACTIVE_STANDARD = \"MSCC5_SRM5\" as const;",
          "tokens": [
            "MSCC5",
            "MSCC",
            "SRM",
            "CC"
          ]
        },
        {
          "line": 18,
          "text": "// Minimal category map for known codes (extend as needed)",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 19,
          "text": "export const CODE_CATEGORY: Record<WrcCode, Category | \"NEUTRAL\"> = {",
          "tokens": [
            "WRc",
            "CC"
          ]
        },
        {
          "line": 20,
          "text": "// structural",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 21,
          "text": "CC: \"STRUCTURAL\", CMJ: \"STRUCTURAL\", FC: \"STRUCTURAL\", FCJ: \"STRUCTURAL\",",
          "tokens": [
            "structural",
            "FC",
            "CC",
            "CMJ",
            "FCJ"
          ]
        },
        {
          "line": 22,
          "text": "FMJ: \"STRUCTURAL\", BJ: \"STRUCTURAL\", JDL: \"STRUCTURAL\", XP: \"STRUCTURAL\",",
          "tokens": [
            "structural",
            "BJ"
          ]
        },
        {
          "line": 24,
          "text": "// service/operational",
          "tokens": [
            "service",
            "operational"
          ]
        },
        {
          "line": 25,
          "text": "DER: \"SERVICE\", DEE: \"SERVICE\", DEF: \"SERVICE\", DES: \"SERVICE\",",
          "tokens": [
            "service",
            "DER",
            "DES"
          ]
        },
        {
          "line": 26,
          "text": "RM: \"SERVICE\", RMJ: \"SERVICE\", RFJ: \"SERVICE\", CXD: \"SERVICE\", CXI: \"SERVICE\",",
          "tokens": [
            "service",
            "RMJ"
          ]
        },
        {
          "line": 29,
          "text": "WL: \"NEUTRAL\", JN: \"NEUTRAL\", CP: \"NEUTRAL\", MH: \"NEUTRAL\",",
          "tokens": [
            "WL",
            "JN",
            "CP"
          ]
        },
        {
          "line": 32,
          "text": "// authentic WinCan codes (from genuine database processing)",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 33,
          "text": "LL: \"STRUCTURAL\", // Longitudinal line deviation (observed in items 6, 9, etc.)",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 34,
          "text": "REF: \"NEUTRAL\",   // Reflection (observed in item 6)",
          "tokens": [
            "REF",
            "FL"
          ]
        },
        {
          "line": 39,
          "text": "// SRM5 action thresholds by category.",
          "tokens": [
            "SRM",
            "threshold"
          ]
        },
        {
          "line": 40,
          "text": "// Grade 1 => monitor/reinspect. Grade ≥2 => rule-driven action.",
          "tokens": [
            "grade",
            "rule"
          ]
        },
        {
          "line": 41,
          "text": "export const SRM_THRESHOLDS = {",
          "tokens": [
            "SRM",
            "threshold"
          ]
        },
        {
          "line": 42,
          "text": "STRUCTURAL: { reinspectBelow: 2 }, // 2+ triggers specific structural actions",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 43,
          "text": "SERVICE:    { reinspectBelow: 2 }, // 2+ triggers specific maintenance actions",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 50,
          "text": "| \"PATCH\"",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 51,
          "text": "| \"SPOT_RELINE\"",
          "tokens": [
            "reline"
          ]
        },
        {
          "line": 52,
          "text": "| \"RELINE\"",
          "tokens": [
            "reline"
          ]
        },
        {
          "line": 53,
          "text": "| \"EXCAVATE_REPAIR\"",
          "tokens": [
            "excavate"
          ]
        },
        {
          "line": 56,
          "text": "// Deterministic mapping for common MSCC5 observations at grade ≥2.",
          "tokens": [
            "MSCC5",
            "MSCC",
            "grade",
            "CC",
            "mapping"
          ]
        },
        {
          "line": 58,
          "text": "export function decideAction(code: WrcCode, category: Category, grade: number): Recommendation {",
          "tokens": [
            "WRc",
            "grade",
            "CC"
          ]
        },
        {
          "line": 59,
          "text": "// Sub-grade 2: always reinspect per SRM thresholds",
          "tokens": [
            "SRM",
            "grade",
            "threshold"
          ]
        },
        {
          "line": 60,
          "text": "const threshold = SRM_THRESHOLDS[category].reinspectBelow;",
          "tokens": [
            "SRM",
            "threshold"
          ]
        },
        {
          "line": 61,
          "text": "if (grade < threshold) return \"REINSPECT\";",
          "tokens": [
            "grade",
            "threshold"
          ]
        },
        {
          "line": 63,
          "text": "// Structural",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 64,
          "text": "if (category === \"STRUCTURAL\") {",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 65,
          "text": "if (code === \"XP\") return \"EXCAVATE_REPAIR\";  // Collapse",
          "tokens": [
            "excavate"
          ]
        },
        {
          "line": 66,
          "text": "if (code === \"BJ\") return \"PATCH\";            // Broken at joint (spot repair)",
          "tokens": [
            "patch",
            "BJ"
          ]
        },
        {
          "line": 67,
          "text": "if (code === \"FCJ\" || code === \"FMJ\" || code === \"FC\") {",
          "tokens": [
            "FC",
            "FCJ"
          ]
        },
        {
          "line": 68,
          "text": "return grade >= 4 ? \"SPOT_RELINE\" : \"PATCH\";",
          "tokens": [
            "patch",
            "reline",
            "grade"
          ]
        },
        {
          "line": 70,
          "text": "if (code === \"JDL\") return \"PATCH\";          // Large joint displacement",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 71,
          "text": "if (code === \"CC\" || code === \"CMJ\") {",
          "tokens": [
            "CC",
            "CMJ"
          ]
        },
        {
          "line": 72,
          "text": "return grade >= 4 ? \"SPOT_RELINE\" : \"PATCH\";",
          "tokens": [
            "patch",
            "reline",
            "grade"
          ]
        },
        {
          "line": 76,
          "text": "// Service/Operational",
          "tokens": [
            "service",
            "operational"
          ]
        },
        {
          "line": 77,
          "text": "if (category === \"SERVICE\") {",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 78,
          "text": "if (code === \"RM\" || code === \"RMJ\" || code === \"RFJ\") return \"ROOT_CUT\";",
          "tokens": [
            "RMJ"
          ]
        },
        {
          "line": 79,
          "text": "if (code === \"DER\" || code === \"DES\" || code === \"DEE\" || code === \"DEF\") return \"CLEAN\";",
          "tokens": [
            "DER",
            "DES"
          ]
        }
      ]
    },
    {
      "file": "src/processors/sectionProcessor.ts",
      "hits": [
        {
          "line": 2,
          "text": "import { CODE_CATEGORY, decideAction, type WrcCode } from \"../config/standards\";",
          "tokens": [
            "WRc",
            "CC"
          ]
        },
        {
          "line": 5,
          "text": "code: string;        // e.g., \"CC\", \"RMJ\"",
          "tokens": [
            "CC",
            "RMJ"
          ]
        },
        {
          "line": 6,
          "text": "grade: number;       // MSCC/SRM grade as integer",
          "tokens": [
            "MSCC",
            "SRM",
            "grade",
            "CC"
          ]
        },
        {
          "line": 21,
          "text": "grade: number;",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 22,
          "text": "category: \"STRUCTURAL\" | \"SERVICE\" | \"NEUTRAL\";",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 29,
          "text": "const code = obs.code as WrcCode;",
          "tokens": [
            "WRc",
            "CC"
          ]
        },
        {
          "line": 33,
          "text": "if (category !== \"NEUTRAL\" && Number.isFinite(obs.grade)) {",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 34,
          "text": "recommendation = decideAction(code, category as \"STRUCTURAL\" | \"SERVICE\", obs.grade);",
          "tokens": [
            "grade",
            "structural",
            "service"
          ]
        },
        {
          "line": 40,
          "text": "grade: obs.grade ?? 0,",
          "tokens": [
            "grade"
          ]
        }
      ]
    },
    {
      "file": "shared/address-validation.ts",
      "hits": [
        {
          "line": 1,
          "text": "// Address validation utilities for UK addresses and postcodes",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 20,
          "text": "additionalCosts: {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 21,
          "text": "perMileOver: number; // cost per mile over allowance",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 22,
          "text": "ninSurcharge: number; // additional cost for NIN requirement",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 42,
          "text": "// Extract postcode from address - more flexible matching",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 52,
          "text": "const flexibleMatch = lastParts.match(/[A-Z]{1,2}[0-9]{1,2}\\s?[0-9][A-Z]{2}/i);",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 53,
          "text": "if (flexibleMatch) {",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 54,
          "text": "extractedPostcode = flexibleMatch[0].toUpperCase().trim();",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 68,
          "text": "const hasStreetName = address.toLowerCase().includes('street') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 69,
          "text": "address.toLowerCase().includes('road') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 70,
          "text": "address.toLowerCase().includes('avenue') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 71,
          "text": "address.toLowerCase().includes('lane') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 72,
          "text": "address.toLowerCase().includes('close') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 73,
          "text": "address.toLowerCase().includes('drive') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 74,
          "text": "address.toLowerCase().includes('way') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 75,
          "text": "address.toLowerCase().includes('court') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 76,
          "text": "address.toLowerCase().includes('place') ||",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 77,
          "text": "address.toLowerCase().includes('gardens');",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 79,
          "text": "// More flexible validation - don't require specific street types",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 96,
          "text": "export async function calculateTravelDistance(destinationPostcode: string, depotPostcode?: string): Promise<TravelDistanceResult> {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 105,
          "text": "const mockDistance = calculateMockDistance(fromPostcode, destinationPostcode);",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 120,
          "text": "function calculateMockDistance(depotPostcode: string, destinationPostcode: string): number {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 123,
          "text": "const destArea = destinationPostcode.split(' ')[0];",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 126,
          "text": "if (depotArea === destArea) {",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 132,
          "text": "const baseDistance = Math.abs(depotArea.charCodeAt(0) - destArea.charCodeAt(0)) * 10;",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 143,
          "text": "patching: {",
          "tokens": [
            "patch",
            "patching"
          ]
        },
        {
          "line": 144,
          "text": "maxTravelDistance: 30, // 30 mile radius for patches",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 145,
          "text": "requiresNIN: true,     // Patches require NIN numbers",
          "tokens": [
            "patch"
          ]
        },
        {
          "line": 146,
          "text": "additionalCosts: {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 147,
          "text": "perMileOver: 2.50,   // £2.50 per mile over allowance",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 148,
          "text": "ninSurcharge: 45.00  // £45 NIN processing fee",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 151,
          "text": "cctv: {",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 152,
          "text": "maxTravelDistance: 50, // 50 mile radius for CCTV",
          "tokens": [
            "CC"
          ]
        },
        {
          "line": 154,
          "text": "additionalCosts: {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 155,
          "text": "perMileOver: 1.80,   // £1.80 per mile over allowance",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 159,
          "text": "jetting: {",
          "tokens": [
            "jetting"
          ]
        },
        {
          "line": 160,
          "text": "maxTravelDistance: 40, // 40 mile radius for jetting",
          "tokens": [
            "jetting"
          ]
        },
        {
          "line": 162,
          "text": "additionalCosts: {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 163,
          "text": "perMileOver: 2.20,   // £2.20 per mile over allowance",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 170,
          "text": "additionalCosts: {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 171,
          "text": "perMileOver: 3.00,   // £3.00 per mile over allowance (heavy vehicle)",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 178,
          "text": "additionalCosts: {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 179,
          "text": "perMileOver: 2.80,   // £2.80 per mile over allowance",
          "tokens": [
            "£"
          ]
        },
        {
          "line": 192,
          "text": "): { isWithinAllowance: boolean; exceedsBy: number; additionalCost: number } {",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 197,
          "text": "return { isWithinAllowance: true, exceedsBy: 0, additionalCost: 0 };",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 201,
          "text": "const additionalCost = exceedsBy * workReq.additionalCosts.perMileOver;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 206,
          "text": "additionalCost",
          "tokens": [
            "cost"
          ]
        }
      ]
    },
    {
      "file": "shared/report-validation.ts",
      "hits": [
        {
          "line": 6,
          "text": "summary: string;",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 21,
          "text": "defectType: 'service' | 'structural' | null;",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 22,
          "text": "recommendations: string;",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 23,
          "text": "cost: string;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 34,
          "text": "additionalCost: number;",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 45,
          "text": "vehicleTravelRates?: any[]",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 63,
          "text": "// Phase 4: Vehicle Travel Rates Check",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 64,
          "text": "if (workCategories && vehicleTravelRates !== undefined) {",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 65,
          "text": "const vehicleIssues = validateVehicleTravelRates(workCategories, vehicleTravelRates, configurations);",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 73,
          "text": "let summary = '';",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 75,
          "text": "summary = '✅ Report ready for export';",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 77,
          "text": "summary = '⚠️ Issues must be resolved before export';",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 79,
          "text": "summary = '🟡 Warnings present - review recommended';",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 85,
          "text": "summary",
          "tokens": [
            "Summary"
          ]
        },
        {
          "line": 90,
          "text": "* Validate that all recommendations have pricing configurations",
          "tokens": [
            "pricing",
            "Recommendations"
          ]
        },
        {
          "line": 100,
          "text": "message: `${missingConfigSections.length} items missing pricing configurations`,",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 102,
          "text": "suggestedAction: 'Set up pricing configurations for warning triangle items'",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 119,
          "text": "// Group by defect type for rate adjustment suggestions",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 120,
          "text": "const serviceDefects = belowMinimumSections.filter(s => s.defectType === 'service');",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 121,
          "text": "const structuralDefects = belowMinimumSections.filter(s => s.defectType === 'structural');",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 123,
          "text": "if (serviceDefects.length > 0) {",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 124,
          "text": "const suggestedRate = calculateAdjustedRate(serviceDefects, configurations, 'service');",
          "tokens": [
            "rate",
            "service"
          ]
        },
        {
          "line": 128,
          "text": "message: `${serviceDefects.length} service items below minimum quantity`,",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 129,
          "text": "itemIds: serviceDefects.map(s => s.itemNo),",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 130,
          "text": "suggestedAction: 'Adjust day rate to meet minimum requirements',",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 131,
          "text": "calculatedValue: suggestedRate",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 135,
          "text": "if (structuralDefects.length > 0) {",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 136,
          "text": "const suggestedRate = calculateAdjustedRate(structuralDefects, configurations, 'structural');",
          "tokens": [
            "rate",
            "structural"
          ]
        },
        {
          "line": 140,
          "text": "message: `${structuralDefects.length} structural items below minimum quantity`,",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 141,
          "text": "itemIds: structuralDefects.map(s => s.itemNo),",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 142,
          "text": "suggestedAction: 'Adjust day rate to meet minimum requirements',",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 143,
          "text": "calculatedValue: suggestedRate",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 158,
          "text": "const serviceCount = sections.filter(s => s.defectType === 'service').length;",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 159,
          "text": "const structuralCount = sections.filter(s => s.defectType === 'structural').length;",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 161,
          "text": "if (serviceCount > 0) {",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 162,
          "text": "const costPerServiceItem = travelInfo.additionalCost / serviceCount;",
          "tokens": [
            "cost",
            "service"
          ]
        },
        {
          "line": 166,
          "text": "message: `Project outside 2-hour travel radius - ${serviceCount} service items`,",
          "tokens": [
            "service"
          ]
        },
        {
          "line": 167,
          "text": "suggestedAction: 'Split additional travel cost across service items',",
          "tokens": [
            "cost",
            "service"
          ]
        },
        {
          "line": 168,
          "text": "calculatedValue: costPerServiceItem",
          "tokens": [
            "cost",
            "service"
          ]
        },
        {
          "line": 172,
          "text": "if (structuralCount > 0) {",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 173,
          "text": "const costPerStructuralItem = travelInfo.additionalCost / structuralCount;",
          "tokens": [
            "cost",
            "structural"
          ]
        },
        {
          "line": 177,
          "text": "message: `Project outside 2-hour travel radius - ${structuralCount} structural items`,",
          "tokens": [
            "structural"
          ]
        },
        {
          "line": 178,
          "text": "suggestedAction: 'Split additional travel cost across structural items',",
          "tokens": [
            "cost",
            "structural"
          ]
        },
        {
          "line": 179,
          "text": "calculatedValue: costPerStructuralItem",
          "tokens": [
            "cost",
            "structural"
          ]
        },
        {
          "line": 188,
          "text": "* Validate vehicle travel rates for configured work categories",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 190,
          "text": "function validateVehicleTravelRates(",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 192,
          "text": "vehicleTravelRates: any[],",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 197,
          "text": "// Get work categories that have pricing configurations",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 202,
          "text": "// Check if any configured categories are missing vehicle travel rates",
          "tokens": [
            "rate"
          ]
        },
        {
          "line": 203,
          "text": "const categoriesWithoutRates: string[] = [];",
          "tokens": [
            "rate"
          ]
        }
      ]
    },
    {
      "file": "shared/schema.ts",
      "hits": [
        {
          "line": 2,
          "text": "pgTable,",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 19,
          "text": "// Session storage table for Replit Auth",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 20,
          "text": "export const sessions = pgTable(",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 27,
          "text": "(table) => [index(\"IDX_session_expire\").on(table.expire)],",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 30,
          "text": "// User storage table for Replit Auth",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 31,
          "text": "export const users: any = pgTable(\"users\", {",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 41,
          "text": "adminId: varchar(\"admin_id\").references(() => users.id), // Reference to admin user for team members",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 54,
          "text": "// Project folders table for organizing reports",
          "tokens": [
            "DER",
            "Table"
          ]
        },
        {
          "line": 55,
          "text": "export const projectFolders = pgTable(\"project_folders\", {",
          "tokens": [
            "DER",
            "Table"
          ]
        },
        {
          "line": 57,
          "text": "userId: varchar(\"user_id\").notNull().references(() => users.id),",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 58,
          "text": "folderName: varchar(\"folder_name\").notNull(),",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 69,
          "text": "// File uploads table",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 70,
          "text": "export const fileUploads = pgTable(\"file_uploads\", {",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 72,
          "text": "userId: varchar(\"user_id\").notNull().references(() => users.id),",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 73,
          "text": "folderId: integer(\"folder_id\").references(() => projectFolders.id),",
          "tokens": [
            "DER",
            "REF"
          ]
        },
        {
          "line": 85,
          "text": "extractedData: text(\"extracted_data\"), // Temporary storage for extracted sections during pause workflow",
          "tokens": [
            "FL"
          ]
        },
        {
          "line": 91,
          "text": "// Section inspection data table",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 92,
          "text": "export const sectionInspections = pgTable(\"section_inspections\", {",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 94,
          "text": "fileUploadId: integer(\"file_upload_id\").notNull().references(() => fileUploads.id),",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 110,
          "text": "defectType: varchar(\"defect_type\"), // 'service', 'structural', or null for mixed/clean sections",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 111,
          "text": "severityGrade: varchar(\"severity_grade\"),",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 112,
          "text": "severityGrades: jsonb(\"severity_grades\"), // {structural: number | null, service: number | null}",
          "tokens": [
            "grade",
            "grades",
            "structural",
            "service",
            "DES"
          ]
        },
        {
          "line": 113,
          "text": "recommendations: text(\"recommendations\"),",
          "tokens": [
            "Recommendations"
          ]
        },
        {
          "line": 114,
          "text": "adoptable: varchar(\"adoptable\"),",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 115,
          "text": "cost: varchar(\"cost\"),",
          "tokens": [
            "cost"
          ]
        },
        {
          "line": 119,
          "text": "// Individual defects table for multiple defects per section",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 120,
          "text": "export const sectionDefects = pgTable(\"section_defects\", {",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 125,
          "text": "defectCode: varchar(\"defect_code\").notNull(), // CR, DER, FL, etc.",
          "tokens": [
            "DER",
            "FL"
          ]
        },
        {
          "line": 128,
          "text": "description: text(\"description\"),",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 129,
          "text": "mscc5Grade: integer(\"mscc5_grade\"),",
          "tokens": [
            "MSCC5",
            "MSCC",
            "grade",
            "CC"
          ]
        },
        {
          "line": 130,
          "text": "defectType: varchar(\"defect_type\"), // structural, service",
          "tokens": [
            "structural",
            "service"
          ]
        },
        {
          "line": 132,
          "text": "operationType: varchar(\"operation_type\"), // cleaning, patching, lining, excavation",
          "tokens": [
            "patch",
            "patching",
            "excavation"
          ]
        },
        {
          "line": 133,
          "text": "estimatedCost: varchar(\"estimated_cost\"),",
          "tokens": [
            "cost",
            "estimate"
          ]
        },
        {
          "line": 137,
          "text": "// Subscription plans table",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 138,
          "text": "export const subscriptionPlans = pgTable(\"subscription_plans\", {",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 149,
          "text": "// Per-report pricing table",
          "tokens": [
            "pricing",
            "Table"
          ]
        },
        {
          "line": 150,
          "text": "export const reportPricing = pgTable(\"report_pricing\", {",
          "tokens": [
            "pricing",
            "Table"
          ]
        },
        {
          "line": 158,
          "text": "// User-specific cost band customization table",
          "tokens": [
            "cost",
            "Table"
          ]
        },
        {
          "line": 159,
          "text": "export const userCostBands = pgTable(\"user_cost_bands\", {",
          "tokens": [
            "cost",
            "Table"
          ]
        },
        {
          "line": 162,
          "text": "grade: integer(\"grade\").notNull(), // 0-5",
          "tokens": [
            "grade"
          ]
        },
        {
          "line": 163,
          "text": "costBand: varchar(\"cost_band\").notNull(), // e.g., \"£0\", \"£500-2,000\"",
          "tokens": [
            "cost",
            "£"
          ]
        },
        {
          "line": 170,
          "text": "// New detailed pricing structure for work categories",
          "tokens": [
            "pricing"
          ]
        },
        {
          "line": 171,
          "text": "export const workCategories = pgTable(\"work_categories\", {",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 173,
          "text": "name: varchar(\"name\").notNull(), // Surveys, Cleansing, Root Cutting, etc.",
          "tokens": [
            "root cut"
          ]
        },
        {
          "line": 174,
          "text": "description: text(\"description\"),",
          "tokens": [
            "DES"
          ]
        },
        {
          "line": 175,
          "text": "sortOrder: integer(\"sort_order\").default(0),",
          "tokens": [
            "DER"
          ]
        },
        {
          "line": 179,
          "text": "export const equipmentTypes = pgTable(\"equipment_types\", {",
          "tokens": [
            "Table"
          ]
        },
        {
          "line": 181,
          "text": "workCategoryId: integer(\"work_category_id\").notNull().references(() => workCategories.id, { onDelete: \"cascade\" }),",
          "tokens": [
            "REF"
          ]
        },
        {
          "line": 182,
          "text": "name: varchar(\"name\").notNull(), // Push/Pull Camera, Crawler Camera, etc.",
          "tokens": [
            "WL"
          ]
        },
        {
          "line": 183,
          "text": "description: text(\"description\"),",
          "tokens": [
            "DES"
          ]
        }
      ]
    }
  ],
  "suspects": [],
  "dashboardConsumers": [
    "server/address-autocomplete.ts",
    "server/adoption-validation.ts",
    "server/authentic-processor.ts",
    "server/construction-validation.ts",
    "server/db-fallback.ts",
    "server/domestic-validation.ts",
    "server/drain-repair-book.ts",
    "server/fuel-price-monitor.ts",
    "server/highways-validation.ts",
    "server/insurance-validation.ts",
    "server/mscc5-classifier.ts",
    "server/os19x-adoption.ts",
    "server/parseDb3File.ts",
    "server/replitAuth.ts",
    "server/routes-backup.ts",
    "server/routes-rev-v1.ts",
    "server/routes.ts",
    "server/rule-evaluator.ts",
    "server/sector-standards.ts",
    "server/tp2-patching-logic.ts",
    "server/utilities-validation.ts",
    "server/wincan-db-reader-backup.ts",
    "server/wincan-db-reader.ts",
    "server/wrc-mapping.json",
    "server/wrc-processor.ts",
    "server/wrc-standards-engine.ts",
    "src/config/standards.ts",
    "src/processors/sectionProcessor.ts",
    "shared/report-validation.ts",
    "shared/schema.ts"
  ]
}
REPLIT AI PROMPT ‚Äì WRc/OS20X/Drain Repair Auto-Update Logic
ts
Copy
Edit
/**
 * GOAL: Automatically check and update all defect recommendations based on:
 *  - WRc MSCC5 condition codes
 *  - OS20X grading and adoptability rules
 *  - WRc Drain Repair Book (4th Ed.) for patching, lining, and excavation logic
 *
 * This function should be triggered post-parsing of observations in your main .db3 files.
 */

import { getWRcRecommendation } from "@/lib/wrc-engine";
import { classifyDefect } from "@/lib/mscc5-classifier";
import { updateDefectRecommendation } from "@/server/db"; // adjust to your ORM/service

async function auditAndUpdateRecommendations(sections) {
  for (const section of sections) {
    for (const obs of section.observations) {
      const { code, position, description, severityGrade } = obs;

      // üß† 1. Classify defect using MSCC5 + OS20X
      const defectClassification = classifyDefect(code, description);

      // üìò 2. Get WRc-compliant recommendation
      const recommendation = getWRcRecommendation({
        code,
        description,
        severityGrade,
        pipeSize: section.pipeSize,
        pipeDepth: section.pipeDepth,
        material: section.material,
      });

      // üõ†Ô∏è 3. Update database or state
      await updateDefectRecommendation({
        sectionId: section.id,
        position,
        code,
        recommendation,
        classification: defectClassification,
        updatedBy: "WRc-MSCC5-AutoUpdater",
      });
    }
  }

  console.log("‚úÖ WRc recommendations and OS20X classifications updated for all defects.");
}
üîç What this does:
Uses classifyDefect() to apply OS20X/MSCC5 severity logic

Uses getWRcRecommendation() to generate repair text (patch, root cutting, reline, dig-up etc.)

Calls updateDefectRecommendation() to store the new logic in your DB (adjust based on ORM ‚Äî Drizzle, Prisma, etc.)

Handles chainage, diameter, depth, and defect type to build correct repair blocks per WRc and Drain Repair Book

üõ† Requirements
You must have:

A WRc logic module (wrc-engine.ts) with a function like getWRcRecommendation(defect)

A valid MSCC5 classifier (mscc5-classifier.ts)

A way to update your database (updateDefectRecommendation()), e.g., via Drizzle or custom repo

Let me know if you‚Äôd like me to generate:

A working getWRcRecommendation() logic block (with thickness & defect-specific patches)

A classifyDefect() ref based on full MSCC5/OS20X

A UI integration to re-validate reports with updated WRc/OS20X grading and adoptability